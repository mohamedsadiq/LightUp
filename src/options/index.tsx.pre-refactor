import { useEffect, useState, useRef } from "react"
import { Storage } from "@plasmohq/storage"
// Animation imports removed
import styled from "@emotion/styled"
import { css, keyframes } from "@emotion/react"

import type { Settings, ModelType, GeminiModel, GrokModel, LocalModel, Mode } from "~types/settings"
import { useRateLimit } from "~hooks/useRateLimit"
import ErrorMessage from "~components/common/ErrorMessage"
import { SYSTEM_PROMPTS, USER_PROMPTS } from "../utils/constants"
import { getMessage } from "~utils/i18n";
import { useLocale } from "~hooks/useLocale"
import LanguageSelector from "~components/LanguageSelector";
import SavedSuccessIndicator from "~components/SavedSuccessIndicator";
import {
  type ToastNotification,
  ToastContainer,
  Toast,
  ToastIcon,
  ToastContent,
  ToastTitle,
  ToastMessage,
  ToastCloseButton,
  UnsavedChangesIndicator,
  AutoSaveStatus,
  LoadingSpinner,
  EnhancedSaveButton
} from "~components/options/NotificationComponents"

// Reusable component for required field labels
const RequiredLabel = () => (
  <span style={{ color: '#E74C3C', fontSize: '12px', marginLeft: '8px' }}>
    {getMessage("requiredFieldLabel") || "(Required)"}
  </span>
)

// Note: SavedSuccessIndicator is now imported from components

// Import the options-specific CSS file for fonts only
import "./options-style.css"

import logoUrl from '../../assets/icon.png';

const GEMINI_MODELS: { value: GeminiModel; label: string; description: string }[] = [
  {
    value: "gemini-2.0-flash",
    label: getMessage("gemini20FlashLabel") || "Gemini 2.0 Flash",
    description: getMessage("gemini20FlashDesc") || "Latest version with improved capabilities and faster response times"
  },
  {
    value: "gemini-2.0-flash-lite-preview-02-05",
    label: getMessage("gemini20FlashLiteLabel") || "Gemini 2.0 Flash-Lite",
    description: getMessage("gemini20FlashLiteDesc") || "Lightweight version optimized for efficiency and speed"
  },
  {
    value: "gemini-2.0-flash-thinking-exp-01-21",
    label: getMessage("gemini20FlashThinkingLabel") || "Gemini 2.0 Flash Thinking",
    description: getMessage("gemini20FlashThinkingDesc") || "Experimental model focused on reasoning and analytical tasks"
  },
  {
    value: "gemini-1.5-pro",
    label: getMessage("gemini15ProLabel") || "Gemini 1.5 Pro",
    description: getMessage("gemini15ProDesc") || "Stable version with balanced performance"
  },
  {
    value: "gemini-1.5-flash",
    label: getMessage("gemini15FlashLabel") || "Gemini 1.5 Flash",
    description: getMessage("gemini15FlashDesc") || "Faster, smaller model for quick responses"
  },
  {
    value: "gemini-1.5-flash-8b",
    label: "Gemini 1.5 Flash-8B",
    description: "8-bit quantized version for efficient processing"
  }
];

const GROK_MODELS: { value: GrokModel; label: string; description: string; price: string }[] = [
  {
    value: "grok-3",
    label: getMessage("grok3Label") || "Grok 3",
    description: getMessage("grok3Desc") || "Standard Grok-3 model",
    price: getMessage("grok3Price") || "$2.00 per 1M tokens"
  },
  {
    value: "grok-3-mini",
    label: getMessage("grok3MiniLabel") || "Grok 3 Mini",
    description: getMessage("grok3MiniDesc") || "Lightweight variant",
    price: getMessage("grok3MiniPrice") || "$1.00 per 1M tokens"
  },
  {
    value: "grok-3-fast",
    label: getMessage("grok3FastLabel") || "Grok 3 Fast",
    description: getMessage("grok3FastDesc") || "Latency-optimised Grok-3",
    price: getMessage("grok3FastPrice") || "$2.50 per 1M tokens"
  },
  {
    value: "grok-3-mini-fast",
    label: getMessage("grok3MiniFastLabel") || "Grok 3 Mini Fast",
    description: getMessage("grok3MiniFastDesc") || "Mini + fast variant",
    price: getMessage("grok3MiniFastPrice") || "$1.50 per 1M tokens"
  },
  {
    value: "grok-2-1212",
    label: getMessage("grok21212Label") || "Grok 2.1212",
    description: getMessage("grok21212Desc") || "Latest Grok-2 build",
    price: getMessage("grok21212Price") || "$1.80 per 1M tokens"
  }
];

const LOCAL_MODELS: { value: LocalModel; label: string; description: string; size: string }[] = [
  {
    value: "llama-2-70b-chat",
    label: getMessage("llama270bLabel") || "Llama 2 70B Chat",
    description: getMessage("llama270bDesc") || "Most powerful Llama 2 model, best for complex tasks",
    size: getMessage("llama270bSize") || "70B parameters"
  },
  {
    value: "deepseek-v3",
    label: getMessage("deepseekV3Label") || "DeepSeek V3",
    description: getMessage("deepseekV3Desc") || "Latest DeepSeek model with enhanced reasoning capabilities",
    size: getMessage("deepseekV3Size") || "67B parameters"
  },
  {
    value: "mixtral-8x7b-instruct",
    label: getMessage("mixtral8x7bLabel") || "Mixtral 8x7B Instruct",
    description: getMessage("mixtral8x7bDesc") || "High-performance mixture of experts model",
    size: getMessage("mixtral8x7bSize") || "47B parameters"
  },
  {
    value: "llama-2-13b-chat",
    label: getMessage("llama213bLabel") || "Llama 2 13B Chat",
    description: getMessage("llama213bDesc") || "Balanced performance and resource usage",
    size: getMessage("llama213bSize") || "13B parameters"
  },
  {
    value: "mistral-7b-instruct",
    label: getMessage("mistral7bLabel") || "Mistral 7B Instruct",
    description: getMessage("mistral7bDesc") || "Efficient instruction-following model",
    size: getMessage("mistral7bSize") || "7B parameters"
  },
  {
    value: "neural-chat-7b-v3-1",
    label: getMessage("neuralChatV31Label") || "Neural Chat V3.1",
    description: getMessage("neuralChatV31Desc") || "Optimized for natural conversations",
    size: getMessage("neuralChatV31Size") || "7B parameters"
  },
  {
    value: "deepseek-v3-base",
    label: getMessage("deepseekV3BaseLabel") || "DeepSeek V3 Base",
    description: getMessage("deepseekV3BaseDesc") || "Lighter version of DeepSeek with good reasoning",
    size: getMessage("deepseekV3BaseSize") || "7B parameters"
  },
  {
    value: "llama-3.2-3b-instruct",
    label: getMessage("llama32_3bLabel") || "Llama 3.2 3B Instruct",
    description: getMessage("llama32_3bDesc") || "Lightweight model for basic tasks",
    size: getMessage("llama32_3bSize") || "3B parameters"
  },
  {
    value: "phi-2",
    label: getMessage("phi2Label") || "Phi-2",
    description: getMessage("phi2Desc") || "Compact but powerful for its size",
    size: getMessage("phi2Size") || "2.7B parameters"
  },
  {
    value: "openchat-3.5",
    label: getMessage("openchat35Label") || "OpenChat 3.5",
    description: getMessage("openchat35Desc") || "Optimized for chat interactions",
    size: getMessage("openchat35Size") || "7B parameters"
  }
];

const copyToClipboard = (text) => {
  navigator.clipboard.writeText(text).then(() => {
    alert('Address copied to clipboard!');
  }, (err) => {
    console.error('Could not copy text: ', err);
  });
};

// Animation variants removed

// Form row - matching popup page screenshot exactly
const FormRow = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 16px 0;
  min-height: 48px;
  gap: 20px;
  
  > div:first-child {
    flex: 1;
    min-width: 0;
  }
  
  > div:last-child {
    flex-shrink: 0;
  }
`

// Label and description - matching popup screenshot exactly
const Label = styled.label`
  font-size: 16px;
  font-weight: 500;
  color: #FFFFFF;
  display: block;
`

const Description = styled.p`
  font-size: 14px;
  color: rgba(255, 255, 255, 0.6);
  margin: 4px 0 0 0;
  line-height: 1.4;
  // margin-bottom: 10px;
`

// Toggle components - matching green toggles from the popup screenshot
const ToggleContainer = styled.label`
  position: relative;
  display: inline-block;
  width: 46px;
  height: 22px;
  cursor: pointer;
`

const ToggleInput = styled.input`
  opacity: 0;
  width: 0;
  height: 0;
  
  &:checked + span {
    background-color: #2DCA6E; /* theme.dark.toggle.active */
  }
  
  &:checked + span:before {
    transform: translateX(24px);
  }
`

const ToggleSlider = styled.span`
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: #4d4d4d; /* theme.dark.toggle.track */
  transition: 0.3s;
  border-radius: 34px;
  
  &:before {
    position: absolute;
    content: "";
    height: 16px;
    width: 16px;
    left: 3px;
    bottom: 3px;
    background-color: white;
    transition: 0.3s;
    border-radius: 50%;
  }
`

// Toggle switch component using styled components - exactly matching popup component
const Switch = ({ id, checked, onChange, label, description = undefined }) => (
  <FormRow>
    <div>
      <Label htmlFor={id}>{label}</Label>
      {description && <Description>{description}</Description>}
    </div>
    <ToggleContainer>
      <ToggleInput
        type="checkbox"
        id={id}
        checked={checked}
        onChange={onChange}
        aria-checked={checked}
      />
      <ToggleSlider />
    </ToggleContainer>
  </FormRow>
);

const RateLimitDisplay = ({ rateLimitRemaining, rateLimitReset }) => {
  const formatTime = (seconds) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes}m ${remainingSeconds}s`;
  };

  return (
    <div className="lu-flex lu-items-center lu-justify-between lu-text-xs lu-text-gray-500 lu-mt-2">
      <span>Rate Limit Remaining: {rateLimitRemaining}</span>
      <span>Reset in: {formatTime(rateLimitReset)}</span>
    </div>
  );
};

// Styled components for the SettingsCard
const CardContainer = styled.div`
  // background-color: #333333;
  border-radius: 10px;
  padding: 0 24px;
  margin-bottom: 24px;
  // border: 1px solid #3A3A3A;
  transition: all 0.2s ease;
`;

const CardHeader = styled.div`
  display: flex;
  align-items: center;
  margin-bottom: 20px;
`;

const CardIcon = styled.div`
  margin-right: 12px;
  color: #9CA3AF;
`;

const CardTitle = styled.h3`
  font-size: 21px;
  font-weight: 600;
  color: #FFFFFF;
`;

// SettingsCard component using styled components
const SettingsCard = ({ id = undefined, title, icon, children, className = "" }) => (
  <CardContainer id={id} className={className}>
    <CardHeader>
      {icon && <CardIcon>{icon}</CardIcon>}
      <CardTitle>{title}</CardTitle>
    </CardHeader>
    {children}
  </CardContainer>
);

const BadgeContainer = styled.span<{ variant?: string }>`
  display: inline-flex;
  align-items: center;
  padding: 2px 10px;
  border-radius: 9999px;
  font-size: 12px;
  font-weight: 500;
  
  ${props => {
    switch (props.variant) {
      case 'success':
        return `
          background-color: #dcfce7;
          color: #166534;
        `;
      case 'warning':
        return `
          background-color: #fef3c7;
          color: #92400e;
        `;
      case 'danger':
        return `
          background-color: #fee2e2;
          color: #991b1b;
        `;
      case 'info':
        return `
          background-color: #dbeafe;
          color: #1e40af;
        `;
      default:
        return `
          background-color: #f3f4f6;
          color: #1f2937;
        `;
    }
  }}
`;

const Badge = ({ children, variant = "default", className = "" }) => {
  return (
    <BadgeContainer variant={variant} className={className}>
      {children}
    </BadgeContainer>
  );
};

// Styled components for ModelOption
const ModelOptionLabel = styled.label`
  display: flex;
  align-items: center;
  padding: 12px;
  border-radius: 6px;
  cursor: pointer;
  transition: all 0.2s ease-in-out;
  background-color: #2D2D2D;
  border: 1px solid transparent;
  
  &:hover {
    background-color: #3D3D3D;
    border-color: #444444;
  }
`;

const ModelRadioInput = styled.input`
  height: 16px;
  width: 16px;
  color: #0078D4;
  transition: all 0.2s ease-in-out;
  background-color: #444444;
  border: 1px solid #555555;
  
  &:focus {
    box-shadow: 0 0 0 2px rgba(0, 120, 212, 0.3);
  }
`;

const ModelContentContainer = styled.div`
  margin-left: 12px;
`;

const ModelTitle = styled.p`
  font-size: 14px;
  font-weight: 500;
  color: #FFFFFF;
`;

const ModelDescription = styled.p`
  font-size: 12px;
  color: #9CA3AF;
`;

const ModelMetadata = styled.p`
  font-size: 12px;
  color: #93C5FD;
  font-weight: 500;
  margin-top: 4px;
`;

// ModelOption component using styled components
const ModelOption = ({ model, selected, onChange, showPrice = false, showSize = false }) => (
  <ModelOptionLabel>
    <ModelRadioInput
      type="radio"
      name="model"
      value={model.value}
      checked={selected}
      onChange={onChange}
    />
    <ModelContentContainer>
      <ModelTitle>{model.label}</ModelTitle>
      <ModelDescription>{model.description}</ModelDescription>
      {showPrice && model.price && (
        <ModelMetadata>Price: {model.price}</ModelMetadata>
      )}
      {showSize && model.size && (
        <ModelMetadata>Size: {model.size}</ModelMetadata>
      )}
    </ModelContentContainer>
  </ModelOptionLabel>
);

// Define theme colors to exactly match the reference image
const theme = {
  dark: {
    background: "#2A2A2A",       // Main popup background
    foreground: "#FFFFFF",      // Text color
    sidebar: "#2A2A2A",         // Sidebar background (darker than before)
    sidebarActive: "#2D2D2D",   // Active sidebar item
    content: "#2A2A2A",         // Content area background
    border: "#3A3A3A",          // Border color
    primary: "#0078D4",         // Primary button color
    destructive: "#E74C3C",     // Destructive button color (delete)
    divider: "#9d9d9d",         // Divider line color
    button: {
      default: "#444444",       // Default button background (gray buttons in reference)
      text: "#FFFFFF"           // Button text color
    },
    toggle: {
      active: "#2DCA6E",        // Active toggle switch (green color in reference)
      inactive: "#6B6B6B",      // Inactive toggle
      track: "#333333"          // Toggle track
    },
    card: "#333333"            // Card background color
  }
}

// Styled components for form elements - Exactly matching popup component
const FormGroup = styled.div`
  margin-bottom: 18px;
`

const FormLabel = styled.label`
  display: block;
  font-size: 16px;
  font-weight: 500;
  color: #FFFFFF;
  margin-bottom: 8px;
`

const FormDescription = styled.p`
  font-size: 14px;
  color: rgba(255, 255, 255, 0.6);
  margin: 4px 0 0 0;
  line-height: 1.4;
  margin-bottom: 10px;
`

const FormSelect = styled.select`
  background-color: rgba(0, 0, 0, 0.2);
  color: #FFFFFF;
  padding: 8px 30px 8px 12px;
  border-radius: 6px;
  border: 1px solid rgba(255, 255, 255, 0.1);
  font-size: 15px;
  min-width: 180px;
  appearance: none;
  background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M6 9l6 6 6-6"/></svg>');
  background-repeat: no-repeat;
  background-position: right 12px center;
  transition: all 0.2s ease;
  
  &:focus {
    outline: none;
    border-color: #2DCA6E;
    box-shadow: 0 0 0 1px rgba(45, 202, 110, 0.2);
  }
  
  &:hover {
    border-color: rgba(255, 255, 255, 0.2);
  }
`

const FormInput = styled.input`
  background-color: #2A2A2A;
  color: #FFFFFF;
  padding: 10px 14px;
  border-radius: 4px;
  border: 1px solid #3A3A3A;
  font-size: 16px;
  width: 100%;
  
  &:focus {
    outline: none;
    border-color: #0078D4;
  }
  
  &::placeholder {
    color: #9CA3AF;
  }
`;

const FormTextarea = styled.textarea`
  background-color: ${theme.dark.background};
  color: ${theme.dark.foreground};
  color: #FFFFFF;
  padding: 10px 14px;
  border-radius: 4px;
  border: 1px solid #3A3A3A;
  font-size: 16px;
  width: 100%;
  resize: vertical;
  min-height: 120px;
  font-family: 'Roboto', sans-serif;
  line-height: 1.5;
  
  &:focus {
    outline: none;
    border-color: #0078D4;
  }
`

const SectionHeader = styled.h4`
   font-size: 20px;
    font-weight: 500;
    margin: 0;
    color: rgb(255, 255, 255);
    /* padding-bottom: 8px; */
    margin-top: 23px;
  // border-bottom: 1px solid rgba(157, 157, 157, 0.3);
`

const SectionContainer = styled.div`
      margin-bottom: 21px;
    display: flex
;
    flex-direction: column;
    gap: 6px;
`

const Button = styled.button<{ variant?: 'primary' | 'destructive' | 'default' }>`
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 8px 16px;
  border-radius: 30px; /* More rounded buttons to match popup */
  font-size: 15px;
  font-weight: 500;
  cursor: pointer;
  transition: background-color 0.2s;
  border: none;
  
  background-color: ${props => {
    if (props.variant === 'primary') return '#0078D4';
    if (props.variant === 'destructive') return '#E74C3C';
    return '#444444';
  }};
  
  color: #FFFFFF;
  
  &:hover {
    background-color: ${props => {
      if (props.variant === 'primary') return '#106EBE';
      if (props.variant === 'destructive') return '#C0392B';
      return '#505050';
    }};
  }
  
  &:focus {
    outline: none;
    box-shadow: 0 0 0 2px rgba(0, 120, 212, 0.3);
  }
`

const SubContainer = styled.div`
  background-color: #2D2D2D;
  border-radius: 8px;
  padding: 18px;
  border: 1px solid #444444;
  margin-bottom: 16px;
  // box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
  transition: all 0.2s ease;
  
  &:hover {
    // box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  }
`;

const StyledPromptDisplay = styled.div`
  margin-top: 10px;
  padding: 14px;
  background-color: #2D2D2D;
  border: 1px solid #444444;
  border-radius: 8px;
  font-family: 'Roboto Mono', monospace;
  font-size: 14px;
  color: #BDC3CF;
  white-space: pre-wrap;
  overflow-x: auto;
  max-height: 200px;
  overflow-y: auto;
  box-shadow: inset 0 1px 5px rgba(0, 0, 0, 0.2);
  line-height: 1.5;
`;

// Common styling
const flexCenter = css`
  display: flex;
  align-items: center;
  justify-content: center;
`

const flexBetween = css`
  display: flex;
  align-items: center;
  justify-content: space-between;
`

// Main container - With increased width as requested
const OptionsContainer = styled.div`
  width: 100vw;
  height: 100vh; // Use 100vh to fill the viewport height
  max-height: unset; // Remove max-height constraint
  background: #2A2A2A; // Match popup dark background
  color: #FFFFFF;
  overflow: hidden; // Prevents the whole container from scrolling
  position: fixed; // Force fixed positioning to ignore any parent margins
  top: 0;
  left: 0;
  margin: 0 !important;
  padding: 0 !important;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);
  display: flex;
  flex-direction: column;
`

// Header - Matches the popup component exactly
const Header = styled.header`
  ${flexBetween};
  padding: 14px 20px;
  background: #232323;
  border-bottom: 1px solid #3A3A3A;
  height: 80px;
`

const HeaderTitle = styled.h1`
        font-size: 22px;
  font-weight: 600; 
  color: white;
  margin: 0; 
  display: flex;
  align-items: center;
`;

const HeaderLogoWrapper = styled.div`
  display: flex;
  align-items: center;
`;

const VersionBadgeContainer = styled.div`
  display: flex;
  align-items: center;
  gap: 4px;
  margin-right: 12px;
`;

const BetaBadge = styled.span`
  position: relative;
  background: linear-gradient(135deg, rgb(56 56 56) 0%, rgb(33 33 33) 100%);
  color: white;
        font-size: 10px;
  font-weight: 700;
  padding: 3px 8px;
  border-radius: 4px;
  letter-spacing: 0.7px;
  text-transform: uppercase;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.25);
  &:after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    border-radius: 4px;
    padding: 1px;
    background: linear-gradient(135deg, rgba(255,255,255,0.4), rgba(255,255,255,0.1));
    -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
    -webkit-mask-composite: xor;
    mask-composite: exclude;
    pointer-events: none;
  }
`;

const VersionNumber = styled.span`
  color: rgba(255, 255, 255, 0.75);
        font-size: 11px;
  font-weight: 500;
  letter-spacing: 0.5px;
  background: rgba(0, 0, 0, 0.2);
  padding: 3px 8px;
  border-radius: 7px;
  border: 1px solid rgba(255, 255, 255, 0.1);
`;

const LogoImage = styled.img`
  height: 3.5rem; /* 24px */
  width: 3.5rem;  /* 24px */
  margin-right: 0.5rem; /* 8px */
  border-radius: 9px;
`;

const CloseButton = styled.button`
  background: none;
  border: none;
  color: ${theme.dark.foreground};
  cursor: pointer;
  padding: 8px;
  border-radius: 4px;
  
  &:hover {
    background: rgba(255, 255, 255, 0.1);
  }
`

// Main content area - Exactly matching popup component
const ContentWrapper = styled.div`
  display: flex;
  flex: 1;
  padding:22px 14px 0 14px;
  overflow: hidden; // Prevents the wrapper itself from scrolling
`

// Sidebar - Matching popup component
const Sidebar = styled.nav`
  width: 192px;
  background: #2A2A2A;
  padding: 0;
  flex-shrink: 0; // Prevents sidebar from shrinking
`

const SidebarItem = styled.button<{ active: boolean }>`
  display: flex;
  align-items: center;
  width: 100%;
  padding: 12px 16px;
  background: ${props => props.active ? '#ffffff0d' : 'transparent'};
  border: none;
  color: ${props => props.active ? '#FFFFFF' : 'rgba(255, 255, 255, 0.7)'};
  font-size: 15px;
  text-align: left;
  cursor: pointer;
  border-radius: 7px;
  margin-bottom: 4px;
  transition: all 0.2s ease;
  
  &:hover {
    background: ${props => props.active ? '#ffffff0d' : 'rgba(255, 255, 255, 0.05)'};
    color: #FFFFFF;
  }
`

const SidebarIcon = styled.div`
  width: 18px;
  height: 18px;
  margin-right: 10px;
  opacity: 0.9;
  ${flexCenter};
`

const SidebarDivider = styled.div`
  height: 1px;
  background: #ffffff0d;
  margin: 16px 12px;
  opacity: 0.3;
`

// Content area - Exactly matching popup component
const ContentArea = styled.div`
  flex: 1;
  padding: 10px 20px;
  background: #2A2A2A;
  overflow-y: auto; // Enables vertical scrolling
  overflow-x: hidden; // Prevents horizontal scrolling
  padding-bottom: 58px;
`

// Section styling - Exactly matching popup component
const Section = styled.section`
  margin-bottom: 20px;
`

const SectionTitle = styled.h2`
  font-size: 17px;
  font-weight: 500;
  margin: 0 0 14px 0;
  color: #FFFFFF;
`

const SectionDivider = styled.div`
  height: 1px;
  background: rgba(255, 255, 255, 0.1);
  margin: 0;
  width: 100%;
`

const ThemeButton = styled.button<{ selected: boolean }>`
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background-color: #333333;
  border: 2px solid ${props => props.selected ? '#2DCA6E' : 'rgba(255, 255, 255, 0.1)'};
  color: white;
  border-radius: 8px;
  padding: 16px;
  min-width: 120px;
  cursor: pointer;
  transition: all 0.2s ease;
  
  &:hover {
    background-color: #3a3a3a;
    border-color: ${props => props.selected ? '#2DCA6E' : 'rgba(255, 255, 255, 0.3)'};
  }
  
  div {
    margin-top: 8px;
    font-size: 14px;
    font-weight: 500;
  }
`

const ThemeIcon = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  width: 32px;
  height: 32px;
`

const ColorButton = styled.button<{ color: string; selected: boolean }>`
  width: 48px;
  height: 48px;
  border-radius: 50%;
  border: 2px solid ${props => props.selected ? '#2DCA6E' : 'rgba(255, 255, 255, 0.15)'};
  background-color: ${props => props.color};
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.2s ease;
  padding: 0;
  outline: none;
  
  &:hover {
    border-color: rgba(255, 255, 255, 0.5);
  }
  
  svg {
    opacity: ${props => props.selected ? 1 : 0};
    width: 16px;
    height: 16px;
    position: absolute;
    top: 4px;
    right: 4px;
    color: #2DCA6E;
  }
`;

const SaveButton = styled.button<{ success?: boolean; disabled?: boolean }>`
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  padding: 8px 16px;
  border-radius: 6px;
  font-size: 14px;
  font-weight: 500;
  transition: all 0.2s ease;
  color: white;
  background-color: ${props => props.success ? '#2DCA6E' : props.disabled ? '#555555' : '#0078D4'};
  border: none;
  cursor: ${props => props.disabled ? 'not-allowed' : 'pointer'};
  opacity: ${props => props.disabled ? 0.7 : 1};
  
  &:hover {
    background-color: ${props => props.success ? '#25AE5F' : props.disabled ? '#555555' : '#0069BA'};
  }
  
  svg {
    width: 16px;
    height: 16px;
  }
`;

const FontSizeButton = styled.button<{ selected: boolean }>`
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background-color: #333333;
  border: 2px solid ${props => props.selected ? '#2DCA6E' : 'rgba(255, 255, 255, 0.1)'};
  color: white;
  border-radius: 8px;
  padding: 12px 16px;
  min-width: 100px;
  cursor: pointer;
  transition: all 0.2s ease;
  
  &:hover {
    background-color: #3a3a3a;
    border-color: ${props => props.selected ? '#2DCA6E' : 'rgba(255, 255, 255, 0.3)'};
  }
  
  .size-preview {
    font-weight: 500;
    margin-bottom: 6px;
  }
  
  .size-label {
`

const LayoutButton = styled.button<{ selected?: boolean }>`
  position: relative;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background: ${props => props.selected ? 'rgba(45, 202, 110, 0.1)' : 'rgba(255, 255, 255, 0.05)'};
  border: 1px solid ${props => props.selected ? '#2DCA6E' : 'rgba(255, 255, 255, 0.1)'};
  color: ${theme.dark.foreground};
  padding: 12px 16px;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.2s ease;
  min-width: 150px;
  
  .layout-icon {
    margin-bottom: 8px;
  }
  
  .layout-label {
          font-size: 14px;
    font-weight: 500;
  }
  
  &:hover {
    background: rgba(255, 255, 255, 0.1);
    border-color: ${props => props.selected ? '#2DCA6E' : 'rgba(255, 255, 255, 0.2)'};
  }
`;

const ActionButton = styled.button<{ selected?: boolean }>`
  position: relative;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background: ${props => props.selected ? 'rgba(45, 202, 110, 0.1)' : 'rgba(255, 255, 255, 0.05)'};
  border: 1px solid ${props => props.selected ? '#2DCA6E' : 'rgba(255, 255, 255, 0.1)'};
  color: ${theme.dark.foreground};
  padding: 12px 20px;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.2s ease;
  min-width: 95px;
  min-height: 95px;
  
  &:hover {
    background: rgba(255, 255, 255, 0.1);
    border-color: ${props => props.selected ? '#2DCA6E' : 'rgba(255, 255, 255, 0.2)'};
  }
`;

const Logo = () => (
  <HeaderLogoWrapper>
    <LogoImage src={logoUrl} alt="LightUp Logo" />
    <HeaderTitle theme={theme.dark}>LightUp</HeaderTitle>
  </HeaderLogoWrapper>
);

// Custom hook for toast notifications
const useToastNotifications = () => {
  const [toasts, setToasts] = useState<ToastNotification[]>([]);
  const [exitingToasts, setExitingToasts] = useState<Set<string>>(new Set());

  const addToast = (toast: Omit<ToastNotification, 'id'>) => {
    const id = Math.random().toString(36).substr(2, 9);
    const newToast: ToastNotification = {
      id,
      duration: 5000,
      ...toast,
    };

    setToasts(prev => [...prev, newToast]);

    if (!newToast.persistent && newToast.duration) {
      setTimeout(() => {
        removeToast(id);
      }, newToast.duration);
    }

    return id;
  };

  const removeToast = (id: string) => {
    setExitingToasts(prev => new Set([...prev, id]));
    
    setTimeout(() => {
      setToasts(prev => prev.filter(toast => toast.id !== id));
      setExitingToasts(prev => {
        const newSet = new Set(prev);
        newSet.delete(id);
        return newSet;
      });
    }, 300);
  };

  return { toasts, addToast, removeToast, exitingToasts };
};

// Auto-save hook with debouncing
const useAutoSave = (
  settings: Settings, 
  storage: Storage, 
  addToast: (toast: Omit<ToastNotification, 'id'>) => string
) => {
  const [autoSaveStatus, setAutoSaveStatus] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle');
  const timeoutRef = useRef<NodeJS.Timeout | null>(null);
  const lastSavedRef = useRef<string>('');

  const autoSave = async (immediateSettings?: Settings, updateInitialSettings?: (settings: Settings) => void) => {
    const settingsToSave = immediateSettings || settings;
    const settingsString = JSON.stringify(settingsToSave);
    
    // Skip if settings haven't changed
    if (settingsString === lastSavedRef.current) {
      return;
    }

    try {
      setAutoSaveStatus('saving');
      await storage.set("settings", settingsToSave);
      lastSavedRef.current = settingsString;
      setAutoSaveStatus('saved');
      
      // Update initial settings to mark as saved (this fixes the unsaved changes conflict)
      if (updateInitialSettings) {
        updateInitialSettings(settingsToSave);
      }
      
      // Notify all tabs about the settings change
      if (typeof chrome !== 'undefined' && chrome.tabs) {
        chrome.tabs.query({}, (tabs) => {
          tabs.forEach(tab => {
            if (tab.id) {
              chrome.tabs.sendMessage(tab.id, { 
                type: "SETTINGS_UPDATED", 
                settings: settingsToSave 
              }).catch(() => {
                // Ignore errors for tabs without content script
              });
            }
          });
        });
      }

      setTimeout(() => {
        setAutoSaveStatus('idle');
      }, 2000);
    } catch (error) {
      console.error("Auto-save failed:", error);
      setAutoSaveStatus('error');
      addToast({
        type: 'error',
        title: getMessage('autoSaveFailedTitle') || 'Auto-save Failed',
        message: getMessage('autoSaveFailedMessage') || 'Your changes were not saved automatically. Please save manually.',
        persistent: true
      });
    }
  };

  const debouncedAutoSave = (immediateSettings?: Settings, updateInitialSettings?: (settings: Settings) => void) => {
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
    }
    
    timeoutRef.current = setTimeout(() => {
      autoSave(immediateSettings, updateInitialSettings);
    }, 10000); // Auto-save after 10 seconds of inactivity
  };

  return { autoSaveStatus, debouncedAutoSave, autoSave, timeoutRef };
};

function IndexOptions() {
  const storage = useRef(new Storage()).current;
  const { locale, changeLocale } = useLocale();
  const [settings, setSettings] = useState<Settings>({
    modelType: "basic",
    maxTokens: 2048,
    apiKey: "",
    geminiApiKey: "",
    xaiApiKey: "",
    grokModel: "grok-2",
    localModel: "llama-2-70b-chat",
    basicModel: "gemini-2.0-flash-lite-preview-02-05",
    customization: {
      showSelectedText: false,
      theme: "light",
      radicallyFocus: false,
              fontSize: "16px",
      highlightColor: "default",
      popupAnimation: "scale",
      persistHighlight: false,
      layoutMode: "sidebar",
      activationMode: "manual",
      enablePDFSupport: false,
      showTextSelectionButton: true
    }
  });

  const [error, setError] = useState("");
  const [isSaving, setIsSaving] = useState(false);
  const [saveSuccess, setSaveSuccess] = useState(false);
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);
  const [initialSettings, setInitialSettings] = useState<Settings | null>(null);
  
  // Enhanced notification system
  const { toasts, addToast, removeToast, exitingToasts } = useToastNotifications();
  
  // Auto-save functionality
  const { autoSaveStatus, debouncedAutoSave, autoSave, timeoutRef } = useAutoSave(settings, storage, addToast);

  const [activePromptMode, setActivePromptMode] = useState<Mode>("explain");
  const [isEditingSystemPrompt, setIsEditingSystemPrompt] = useState(false);
  const [isEditingUserPrompt, setIsEditingUserPrompt] = useState(false);
  const [editedSystemPrompt, setEditedSystemPrompt] = useState("");
  const [editedUserPrompt, setEditedUserPrompt] = useState("");

  // Load settings from storage when component mounts
  useEffect(() => {
    const loadSettings = async () => {
      try {
        const savedSettings = await storage.get("settings") as Settings | undefined;
        if (savedSettings) {
          const loadedSettings = {
            ...savedSettings,
            customization: {
              showSelectedText: savedSettings.customization?.showSelectedText ?? true,
              theme: savedSettings.customization?.theme ?? "light",
              radicallyFocus: savedSettings.customization?.radicallyFocus ?? false,
              fontSize: savedSettings.customization?.fontSize ?? "medium",
              highlightColor: savedSettings.customization?.highlightColor ?? "default",
              popupAnimation: savedSettings.customization?.popupAnimation ?? "fade",
              persistHighlight: savedSettings.customization?.persistHighlight ?? false,
              layoutMode: savedSettings.customization?.layoutMode ?? "sidebar",
              quickView: savedSettings.customization?.quickView ?? true,
              automaticActivation: savedSettings.customization?.automaticActivation ?? false,
              contextAwareness: savedSettings.customization?.contextAwareness ?? false,
              activationMode: savedSettings.customization?.activationMode ?? "manual",
              enablePDFSupport: savedSettings.customization?.enablePDFSupport ?? false,
              showTextSelectionButton: savedSettings.customization?.showTextSelectionButton ?? true,
              showWebsiteInfo: savedSettings.customization?.showWebsiteInfo ?? true
            }
          };
          setSettings(loadedSettings);
          setInitialSettings(loadedSettings);
        }
      } catch (err) {
        console.error("Error loading settings:", err);
        setError("Failed to load settings");
        addToast({
          type: 'error',
          title: getMessage('loadingFailedTitle') || 'Loading Failed',
          message: getMessage('loadingFailedMessage') || 'Could not load your settings. Using defaults.'
        });
      }
    };
    
    loadSettings();
  }, []);

  // Track unsaved changes
  useEffect(() => {
    if (initialSettings) {
      const hasChanges = JSON.stringify(settings) !== JSON.stringify(initialSettings);
      setHasUnsavedChanges(hasChanges);
      
      // Check if we should auto-save based on what changed
      const shouldAutoSave = () => {
        // If no changes, don't save
        if (!hasChanges) return false;
        
        // Check if only model-related settings changed
        const modelSettingsChanged = 
          settings.modelType !== initialSettings.modelType ||
          settings.geminiModel !== initialSettings.geminiModel ||
          settings.grokModel !== initialSettings.grokModel ||
          settings.localModel !== initialSettings.localModel ||
          settings.geminiApiKey !== initialSettings.geminiApiKey ||
          settings.xaiApiKey !== initialSettings.xaiApiKey ||
          settings.serverUrl !== initialSettings.serverUrl;
        
        // If non-model settings changed, always auto-save
        if (!modelSettingsChanged) return true;
        
        // If model settings changed, check if configuration is complete
        if (settings.modelType === 'gemini') {
          return settings.geminiApiKey && settings.geminiApiKey.trim().length > 0;
        } else if (settings.modelType === 'grok') {
          return settings.xaiApiKey && settings.xaiApiKey.trim().length > 0;
        } else if (settings.modelType === 'local') {
          return settings.serverUrl && settings.serverUrl.trim().length > 0;
        }
        return true; // For 'basic' model type, always allow auto-save
      };
      
      // Trigger auto-save based on the logic above
      if (shouldAutoSave()) {
        debouncedAutoSave(settings, setInitialSettings);
      }
    }
  }, [settings, initialSettings, debouncedAutoSave]);

  // Auto-select models when API keys are provided but no model is selected
  useEffect(() => {
    let needsUpdate = false;
    const updatedSettings = { ...settings };

    // Auto-select Gemini model if API key exists but no model selected
    if (settings.modelType === 'gemini' && settings.geminiApiKey && !settings.geminiModel) {
      updatedSettings.geminiModel = GEMINI_MODELS[0].value;
      needsUpdate = true;
      
      addToast({
        type: 'info',
        title: getMessage('modelAutoSelectedTitle') || 'Model Auto-Selected',
        message: getMessage('geminiModelAutoSelectedMessage', GEMINI_MODELS[0].label) || `Automatically selected ${GEMINI_MODELS[0].label} since you provided a Gemini API key.`,
        duration: 4000
      });
    }

    // Auto-select Grok model if API key exists but no model selected
    if (settings.modelType === 'grok' && settings.xaiApiKey && !settings.grokModel) {
      updatedSettings.grokModel = GROK_MODELS[0].value;
      needsUpdate = true;
      
      addToast({
        type: 'info',
        title: getMessage('modelAutoSelectedTitle') || 'Model Auto-Selected',
        message: getMessage('grokModelAutoSelectedMessage', GROK_MODELS[0].label) || `Automatically selected ${GROK_MODELS[0].label} since you provided a Grok API key.`,
        duration: 4000
      });
    }

    // Auto-select Local model if server URL exists but no model selected
    if (settings.modelType === 'local' && settings.serverUrl && !settings.localModel) {
      updatedSettings.localModel = LOCAL_MODELS[0].value;
      needsUpdate = true;
      
      addToast({
        type: 'info',
        title: getMessage('modelAutoSelectedTitle') || 'Model Auto-Selected',
        message: getMessage('localModelAutoSelectedMessage', LOCAL_MODELS[0].label) || `Automatically selected ${LOCAL_MODELS[0].label} for your Ollama setup.`,
        duration: 4000
      });
    }

    if (needsUpdate) {
      setSettings(updatedSettings);
      // Auto-save when we make model selections due to API key being provided
      setTimeout(() => handleSave(), 100);
    }
  }, [settings.modelType, settings.geminiApiKey, settings.xaiApiKey, settings.serverUrl, settings.geminiModel, settings.grokModel, settings.localModel, addToast]);



  useEffect(() => {
    // const scrollToElement = (id: string) => {
    //   setTimeout(() => {
    //     const element = document.getElementById(id);
    //     if (element) {
    //       element.scrollIntoView({ behavior: 'smooth', block: 'start' });
    //     }
    //   }, 300);
    // };

    // if (window.location.hash) {
    //   const id = window.location.hash.substring(1);
    //   scrollToElement(id);
    // }

    // const handleHashChange = () => {
    //   if (window.location.hash) {
    //     const id = window.location.hash.substring(1);
    //     scrollToElement(id);
    //   }
    // };

    // window.addEventListener('hashchange', handleHashChange);

    // return () => {
    //   window.removeEventListener('hashchange', handleHashChange);
    // };
  }, []);

  // Enhanced save function with better notifications
  const handleSave = async () => {
    try {
      setIsSaving(true);
      
      // Validate model configuration before saving
      const validateModelConfig = () => {
        if (settings.modelType === 'gemini') {
          if (!settings.geminiApiKey || settings.geminiApiKey.trim().length === 0) {
            return {
              isValid: false,
              error: 'Gemini API key is required. Please enter your API key from Google AI Studio.'
            };
          }
        } else if (settings.modelType === 'grok') {
          if (!settings.xaiApiKey || settings.xaiApiKey.trim().length === 0) {
            return {
              isValid: false,
              error: 'xAI API key is required. Please enter your API key from x.ai.'
            };
          }
        } else if (settings.modelType === 'local') {
          if (!settings.serverUrl || settings.serverUrl.trim().length === 0) {
            return {
              isValid: false,
              error: 'Ollama server URL is required. Please enter your server URL (e.g., http://localhost:11434).'
            };
          }
        }
        return { isValid: true };
      };

      // Perform validation
      const validation = validateModelConfig();
      if (!validation.isValid) {
        setIsSaving(false);
        setError(validation.error);
        
        addToast({
          type: 'error',
          title: getMessage('configurationIncompleteTitle') || 'Configuration Incomplete',
          message: validation.error,
          persistent: true
        });
        return;
      }
      
      const updatedSettings = { ...settings };
      
      await storage.set("settings", updatedSettings);
      
      // Update initial settings to reflect saved state
      setInitialSettings(updatedSettings);
      setHasUnsavedChanges(false);
      
      // Notify all tabs about the settings change
      if (typeof chrome !== 'undefined' && chrome.tabs) {
        chrome.tabs.query({}, (tabs) => {
          tabs.forEach(tab => {
            if (tab.id) {
              chrome.tabs.sendMessage(tab.id, { 
                type: "SETTINGS_UPDATED", 
                settings: updatedSettings 
              }).catch(() => {
                // Ignore errors for tabs without content script
              });
            }
          });
        });
      }
      
      setIsSaving(false);
      setSaveSuccess(true);
      
      setTimeout(() => {
        setSaveSuccess(false);
      }, 3000);
    } catch (err) {
      console.error("Failed to save settings:", err);
      setError("Failed to save settings");
      setIsSaving(false);
      
      // Show error notification
      addToast({
        type: 'error',
        title: getMessage('saveFailedTitle') || 'Save Failed',
        message: getMessage('saveFailedMessage') || 'There was an error saving your settings. Please try again.',
        persistent: true
      });
    }
  };

  const handleServerUrlChange = (e) => {
    let url = e.target.value;
    if (url && !url.startsWith("http://") && !url.startsWith("https://")) {
      url = `http://${url}`;
    }
    setSettings(prev => ({
      ...prev,
      serverUrl: url
    }));
  };

  const colorOptions = [
    { value: 'default', label: 'Default (System)', color: 'lu-bg-gradient-to-r lu-from-blue-500 lu-to-green-500' },
    { value: 'yellow', label: 'Yellow', color: 'lu-bg-[#fff8bc]' },
    { value: 'orange', label: 'Orange', color: 'lu-bg-[#FFBF5A]' },
    { value: 'blue', label: 'Blue', color: 'lu-bg-[#93C5FD]' },
    { value: 'green', label: 'Green', color: 'lu-bg-[#86EFAC]' },
    { value: 'purple', label: 'Purple', color: 'lu-bg-[#C4B5FD]' },
    { value: 'pink', label: 'Pink', color: 'lu-bg-[#FDA4AF]' }
  ];

  const handleImmediateSettingUpdate = async (key: string, value: any) => {
    try {
      const newSettings = {
        ...settings,
        customization: {
          ...settings.customization,
          [key]: value
        }
      };
      
      // Update local state
      setSettings(newSettings);
      
      // Use auto-save for immediate updates
      debouncedAutoSave(newSettings);
      
      // Dispatch event for other components in the same window
      window.dispatchEvent(
        new CustomEvent('settingsUpdated', { detail: { settings: newSettings } })
      );
      
      // Notify all tabs about the settings change for real-time updates
      if (typeof chrome !== 'undefined' && chrome.tabs) {
        chrome.tabs.query({}, (tabs) => {
          tabs.forEach(tab => {
            if (tab.id) {
              chrome.tabs.sendMessage(tab.id, { 
                type: "SETTINGS_UPDATED", 
                settings: newSettings,
                updatedKey: key
              }).catch(err => {
                // Ignore errors for tabs that don't have the content script running
                console.log(`Could not send message to tab ${tab.id}:`, err);
              });
            }
          });
        });
      }
    } catch (error) {
      console.error("Error updating setting:", error);
    }
  };
  
  // Function to update multiple settings at once
  const handleMultipleSettingsUpdate = async (settingsUpdates: Record<string, any>) => {
    try {
      const newSettings = {
        ...settings,
        customization: {
          ...settings.customization,
          ...settingsUpdates
        }
      };
      
      // Update local state
      setSettings(newSettings);
      
      // Save to storage
      await storage.set("settings", newSettings);
      
      // Dispatch event for other components in the same window
      window.dispatchEvent(
        new CustomEvent('settingsUpdated', { detail: { settings: newSettings } })
      );
      
      // Notify all tabs about the settings change for real-time updates
      if (typeof chrome !== 'undefined' && chrome.tabs) {
        chrome.tabs.query({}, (tabs) => {
          tabs.forEach(tab => {
            if (tab.id) {
              chrome.tabs.sendMessage(tab.id, { 
                type: "SETTINGS_UPDATED", 
                settings: newSettings,
                updatedKeys: Object.keys(settingsUpdates)
              }).catch(err => {
                // Ignore errors for tabs that don't have the content script running
                console.log(`Could not send message to tab ${tab.id}:`, err);
              });
            }
          });
        });
      }
    } catch (error) {
      console.error("Error updating multiple settings:", error);
    }
  };

  const [activeTab, setActiveTab] = useState("general");

  // Save immediately when user navigates away from a section
  const previousActiveTab = useRef(activeTab);
  useEffect(() => {
    const hasTabChanged = previousActiveTab.current !== activeTab;
    
    if (hasTabChanged && hasUnsavedChanges && initialSettings) {
      // Cancel any pending debounced save
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }
      
      // Save immediately when navigating between sections
      autoSave(settings, setInitialSettings);
      
      addToast({
        type: 'success',
        title: getMessage('settingsSavedTitle') || 'Settings Saved',
        message: getMessage('settingsSavedMessage') || 'Your changes were saved when switching sections.',
        duration: 2000
      });
    }
    
    previousActiveTab.current = activeTab;
  }, [activeTab, hasUnsavedChanges, initialSettings, settings, autoSave, addToast]);

  return (
    <OptionsContainer>
      <Header>
        <Logo />
        <VersionBadgeContainer>
          <BetaBadge>{getMessage("betaBadgeLabel") || "BETA"}</BetaBadge>
          <VersionNumber>v1.1.15</VersionNumber>
        </VersionBadgeContainer>
        {/* <CloseButton onClick={() => window.close()}>
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M18 6L6 18" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
            <path d="M6 6L18 18" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
          </svg>
        </CloseButton> */}
      </Header>
      <ContentWrapper>
        <Sidebar>
          <SidebarItem active={activeTab === "general"} onClick={() => setActiveTab("general")}>
            <SidebarIcon>
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" d="m2.25 12 8.954-8.955c.44-.439 1.152-.439 1.591 0L21.75 12M4.5 9.75v10.125c0 .621.504 1.125 1.125 1.125H9.75v-4.875c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125V21h4.125c.621 0 1.125-.504 1.125-1.125V9.75M8.25 21h8.25" />
              </svg>
            </SidebarIcon>
            {getMessage("generalTabLabel") || "General"}
          </SidebarItem>
          <SidebarItem active={activeTab === "model"} onClick={() => setActiveTab("model")}>
            <SidebarIcon>
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" d="M8.25 3v1.5M4.5 8.25H3m18 0h-1.5M4.5 12H3m18 0h-1.5m-15 3.75H3m18 0h-1.5M8.25 19.5V21M12 3v1.5m0 15V21m3.75-18v1.5m0 15V21m-9-1.5h10.5a2.25 2.25 0 0 0 2.25-2.25V6.75a2.25 2.25 0 0 0-2.25-2.25H6.75A2.25 2.25 0 0 0 4.5 6.75v10.5a2.25 2.25 0 0 0 2.25 2.25Zm.75-12h9v9h-9v-9Z" />
              </svg>
            </SidebarIcon>
            {getMessage("modelSettingsTabLabel") || "Model Settings"}
          </SidebarItem>
          <SidebarItem active={activeTab === "prompts"} onClick={() => setActiveTab("prompts")}>
            <SidebarIcon>
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 0 0-3.375-3.375h-1.5A1.125 1.125 0 0 1 13.5 7.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H8.25m0 12.75h7.5m-7.5 3H12M10.5 2.25H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 0 0-9-9Z" />
              </svg>
            </SidebarIcon>
            {getMessage("promptTemplatesTabLabel") || "Prompt Templates"}
          </SidebarItem>
          <SidebarItem active={activeTab === "customization"} onClick={() => setActiveTab("customization")}>
            <SidebarIcon>
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" d="M9.53 16.122a3 3 0 0 0-5.78 1.128 2.25 2.25 0 0 1-2.4 2.245 4.5 4.5 0 0 0 8.4-2.245c0-.399-.078-.78-.22-1.128Zm0 0a15.998 15.998 0 0 0 3.388-1.62m-5.043-.025a15.994 15.994 0 0 1 1.622-3.395m3.42 3.42a15.995 15.995 0 0 0 4.764-4.648l3.876-5.814a1.151 1.151 0 0 0-1.597-1.597L14.146 6.32a15.996 15.996 0 0 0-4.649 4.763m3.42 3.42a6.776 6.776 0 0 0-3.42-3.42" />
              </svg>
            </SidebarIcon>
            {getMessage("appearanceTabLabel") || "Appearance"}
          </SidebarItem>
          <SidebarItem active={activeTab === "feedback"} onClick={() => setActiveTab("feedback")}>
            <SidebarIcon>
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" d="M7.5 8.25h9m-9 3H12m-9.75 1.51c0 1.6 1.123 2.994 2.707 3.227 1.129.166 2.27.293 3.423.379.35.026.67.21.865.501L12 21l2.755-4.133a1.14 1.14 0 0 1 .865-.501 48.172 48.172 0 0 0 3.423-.379c1.584-.233 2.707-1.626 2.707-3.228V6.741c0-1.602-1.123-2.995-2.707-3.228A48.394 48.394 0 0 0 12 3c-2.392 0-4.744.175-7.043.513C3.373 3.746 2.25 5.14 2.25 6.741v6.018Z" />
              </svg>
            </SidebarIcon>
            {getMessage("tabFeedback") || "Feedback"}
          </SidebarItem>
          <SidebarItem active={activeTab === "about"} onClick={() => setActiveTab("about")}>
            <SidebarIcon>
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" d="m11.25 11.25.041-.02a.75.75 0 0 1 1.063.852l-.708 2.836a.75.75 0 0 0 1.063.853l.041-.021M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Zm-9-3.75h.008v.008H12V8.25Z" />
              </svg>
            </SidebarIcon>
            {getMessage("aboutTabLabel") || "About"}
          </SidebarItem>
        </Sidebar>
        <ContentArea>
          {activeTab === "general" && (
            <div key="general">
               <SettingsCard title={getMessage("generalSettingsTitle") || "General Settings"} icon={null}>
                 <div style={{ display: 'grid', gridTemplateColumns: 'repeat(1, minmax(0, 1fr))', gap: '24px' }}>
                   <SectionContainer>
                     {/* <SectionHeader>Display Options</SectionHeader> */}
                     
                     <FormRow>
                       <div>
                         <Label>{getMessage("showSelectedTextLabel") || "Show Selected Text"}</Label>
                         <Description>{getMessage("showSelectedTextDescription") || "Display the selected text in the popup for context"}</Description>
                       </div>
                       <ToggleContainer>
                         <ToggleInput 
                           type="checkbox" 
                           checked={settings.customization?.showSelectedText}
                           onChange={(e) => handleImmediateSettingUpdate('showSelectedText', e.target.checked)}
                         />
                         <ToggleSlider />
                       </ToggleContainer>
                     </FormRow>
                     
                     <SectionDivider />
                     
                     <FormRow>
                       <div>
                         <Label>{getMessage("showWebsiteInfoLabel") || "Show Website Info"}</Label>
                         <Description>{getMessage("showWebsiteInfoDescription") || "Display website favicon and title in the popup for context"}</Description>
                       </div>
                       <ToggleContainer>
                         <ToggleInput 
                           type="checkbox" 
                           checked={settings.customization?.showWebsiteInfo !== false}
                           onChange={(e) => handleImmediateSettingUpdate('showWebsiteInfo', e.target.checked)}
                         />
                         <ToggleSlider />
                       </ToggleContainer>
                     </FormRow>
                     
                     <SectionDivider />
                     
                     <FormRow>
                       <div>
                         <Label>{getMessage("keepHighlightedTextLabel") || "Keep Highlighted Text After Popup Closes"}</Label>
                         <Description>{getMessage("keepHighlightedTextDescription") || "Keep the highlight on the selected text after the popup closes"}</Description>
                       </div>
                       <ToggleContainer>
                         <ToggleInput 
                           type="checkbox" 
                           checked={settings.customization?.persistHighlight}
                           onChange={(e) => handleImmediateSettingUpdate('persistHighlight', e.target.checked)}
                         />
                         <ToggleSlider />
                       </ToggleContainer>
                     </FormRow>
                     
                     <SectionDivider />
                     
                     <FormRow>
                       <div>
                         <Label>{getMessage("autoOpenLightUpLabel") || "Auto-Open LightUp on Text Selection"}</Label>
                         <Description>{getMessage("autoOpenLightUpDescription") || "Opens LightUp automatically whenever you select text"}</Description>
                       </div>
                       <ToggleContainer>
                         <ToggleInput 
                            type="checkbox" 
                            checked={settings.customization?.automaticActivation}
                            onChange={(e) => {
                              // Update both settings to ensure consistency in a single operation
                              const newValue = e.target.checked;
                              handleMultipleSettingsUpdate({
                                'automaticActivation': newValue,
                                'activationMode': newValue ? 'automatic' : 'manual'
                              });
                            }}
                         />
                         <ToggleSlider />
                       </ToggleContainer>
                     </FormRow>
                     
                     <SectionDivider />
                     
                     <FormRow>
                        <div>
                          <Label>{getMessage("contextAwarenessLabel") || "Context Awareness"}</Label>
                          <Description>{getMessage("contextAwarenessDescription") || "Use broader page context to improve responses"}</Description>
                        </div>
                        <ToggleContainer>
                          <ToggleInput 
                            type="checkbox" 
                            checked={settings.customization?.contextAwareness}
                            onChange={(e) => handleImmediateSettingUpdate('contextAwareness', e.target.checked)}
                          />
                          <ToggleSlider />
                        </ToggleContainer>
                      </FormRow>

                      <SectionDivider />

                      <FormRow>
                        <div>
                          <Label>Show 'Instant AI' Button</Label>
                          <Description>Add a floating 'Instant AI' button that summarizes or explains the whole page with one click</Description>
                        </div>
                        <ToggleContainer>
                          <ToggleInput 
                            type="checkbox" 
                            checked={settings.customization?.quickView}
                            onChange={(e) => handleImmediateSettingUpdate('quickView', e.target.checked)}
                          />
                          <ToggleSlider />
                        </ToggleContainer>
                      </FormRow>
                      
                      <SectionDivider />
                      
                      <FormRow>
                        <div>
                          <Label>Show Action Button on Text Selection</Label>
                          <Description>Display a small button when text is highlighted</Description>
                        </div>
                        <ToggleContainer>
                          <ToggleInput 
                            type="checkbox" 
                            checked={settings.customization?.showTextSelectionButton !== false}
                            onChange={(e) => handleImmediateSettingUpdate('showTextSelectionButton', e.target.checked)}
                          />
                          <ToggleSlider />
                        </ToggleContainer>
                      </FormRow>
                      <SectionDivider />
                      <div style={{ marginTop: '0', marginBottom: '16px' }}>
                        <Label>Layout Mode</Label>
                        <Description>Choose how LightUp appears on the page</Description>
                        
                        <div style={{ display: 'flex', gap: '12px', marginTop: '16px' }}>
                          <LayoutButton 
                            selected={settings.customization?.layoutMode === 'floating'}
                            onClick={() => handleImmediateSettingUpdate('layoutMode', 'floating')}
                          >
                            <div className="layout-icon">
                              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <rect x="4" y="4" width="16" height="16" rx="2" stroke="white" strokeWidth="2" />
                                <circle cx="12" cy="12" r="1" stroke="white" strokeWidth="2" />
                                <circle cx="12" cy="8" r="1" stroke="white" strokeWidth="2" />
                                <circle cx="12" cy="16" r="1" stroke="white" strokeWidth="2" />
                              </svg>
                            </div>
                            <div className="layout-label">Floating</div>
                          </LayoutButton>
                          
                          <LayoutButton 
                            selected={settings.customization?.layoutMode === 'sidebar'}
                            onClick={() => handleImmediateSettingUpdate('layoutMode', 'sidebar')}
                          >
                            <div className="layout-icon">
                              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <rect x="3" y="3" width="18" height="18" rx="2" stroke="white" strokeWidth="2" />
                                <line x1="15" y1="3" x2="15" y2="21" stroke="white" strokeWidth="2" />
                              </svg>
                            </div>
                            <div className="layout-label">Sidebar</div>
                          </LayoutButton>
                          
                          <LayoutButton 
                            selected={settings.customization?.layoutMode === 'centered'}
                            onClick={() => handleImmediateSettingUpdate('layoutMode', 'centered')}
                          >
                            <div className="layout-icon">
                              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <rect x="2" y="4" width="20" height="16" rx="2" stroke="white" strokeWidth="2" />
                                <rect x="6" y="8" width="12" height="8" rx="1" stroke="white" strokeWidth="2" />
                              </svg>
                            </div>
                            <div className="layout-label">Centered</div>
                          </LayoutButton>
                        </div>
                      </div>
                      
                    
                      
                    
                   </SectionContainer>
                 </div>

               </SettingsCard>
           </div>
          )}

          {activeTab === "model" && (
            <div key="model">
               <SettingsCard title={getMessage("modelSettingsTitle") || "Model Settings"} icon={null}>
                <SectionContainer>
                  <SectionHeader>{getMessage("aiEngineSelectionHeader") || "AI Engine Selection"}</SectionHeader>
                  <SubContainer>
                    <FormGroup>
                      <FormLabel htmlFor="modelType">{getMessage("chooseModelTypeLabel") || "Choose Model Type"}</FormLabel>
                      <FormDescription>{getMessage("chooseModelTypeDescription") || "Select which AI provider to use for generating responses."}</FormDescription>
                      <FormSelect
                        id="modelType"
                        value={settings.modelType}
                        onChange={(e) => {
                          const newModelType = e.target.value as ModelType;
                          setSettings(prev => {
                            const newSettings = { ...prev, modelType: newModelType };
                            
                            // Auto-select first model for Gemini if none selected
                            if (newModelType === 'gemini' && !prev.geminiModel) {
                              newSettings.geminiModel = GEMINI_MODELS[0].value;
                            }
                            // Auto-select first model for Grok if none selected  
                            else if (newModelType === 'grok' && !prev.grokModel) {
                              newSettings.grokModel = GROK_MODELS[0].value;
                            }
                            // Auto-select first model for Local if none selected
                            else if (newModelType === 'local' && !prev.localModel) {
                              newSettings.localModel = LOCAL_MODELS[0].value;
                            }
                            
                            return newSettings;
                          });
                          // Note: No auto-save here - wait for API key to be provided
                        }}
                      >
                        <option value="basic">{getMessage("basicModelTypeOption") || "Basic (Gemini Flash)"}</option>
                        <option value="gemini">{getMessage("geminiModelTypeOption") || "Gemini (Google)"}</option>
                        <option value="grok">{getMessage("grokModelTypeOption") || "Grok (xAI)"}</option>
                        <option value="local">{getMessage("localModelTypeOption") || "Local (Ollama)"}</option>
                      </FormSelect>
                    </FormGroup>
                  </SubContainer>
                </SectionContainer>

                {settings.modelType === "basic" && (
                  <SectionContainer>
                    <div style={{
                      background: 'linear-gradient(135deg, rgba(255, 193, 7, 0.1) 0%, rgba(255, 152, 0, 0.1) 100%)',
                      border: '1px solid rgba(255, 193, 7, 0.3)',
                      borderRadius: '8px',
                      padding: '16px',
                      marginTop: '12px'
                    }}>
                      <div style={{
                        display: 'flex',
                        alignItems: 'flex-start',
                        gap: '12px'
                      }}>
                        <div style={{
                          fontSize: '20px',
                          flexShrink: 0,
                          marginTop: '2px'
                        }}>
                          ⚠️
                        </div>
                        <div>
                          <h4 style={{
                            color: '#FFC107',
                            fontSize: '14px',
                            fontWeight: '600',
                            margin: '0 0 8px 0',
                            textTransform: 'uppercase',
                            letterSpacing: '0.5px'
                          }}>
                            {getMessage("dataPrivacyNoticeTitle") || "Data Privacy Notice"}
                          </h4>
                          <p style={{
                            color: '#E0E0E0',
                            fontSize: '13px',
                            lineHeight: '1.5',
                            margin: '0 0 8px 0'
                          }}>
                            {getMessage("basicTierPrivacyWarningPrimary") || "<strong>Please be careful with your data.</strong> The Basic tier uses a shared proxy service to access AI models. While we don't store your data, your content will be processed through our servers before reaching the AI provider."}
                          </p>
                          <p style={{
                            color: '#B0B0B0',
                            fontSize: '12px',
                            lineHeight: '1.4',
                            margin: '0'
                          }}>
                            {getMessage("basicTierPrivacyWarningSecondary") || "For maximum privacy and security, consider upgrading to a direct API model (Gemini, Grok, or Local) where your data goes directly to the provider or stays on your device."}
                          </p>
                        </div>
                      </div>
                    </div>
                  </SectionContainer>
                )}

                {settings.modelType === "gemini" && (
                  <SectionContainer>
                    <SectionHeader>{getMessage("geminiConfigurationHeader") || "Gemini Configuration"}</SectionHeader>
                    <SubContainer>
                      <FormGroup>
                        <FormLabel htmlFor="geminiApiKey">
                          {getMessage("geminiApiKeyLabel") || "Gemini API Key"}
                          {!settings.geminiApiKey && <RequiredLabel />}
                        </FormLabel>
                        <FormInput
                          type="password"
                          id="geminiApiKey"
                          value={settings.geminiApiKey}
                          onChange={(e) => {
                            const newApiKey = e.target.value;
                            setSettings(prev => ({ ...prev, geminiApiKey: newApiKey }));
                            // Auto-save when API key is provided (and not empty)
                            if (newApiKey.trim()) {
                              setTimeout(() => handleSave(), 100);
                            }
                          }}
                          onBlur={handleSave}
                          placeholder={getMessage("geminiApiKeyPlaceholder") || "Enter your Gemini API key"}
                          style={{
                            borderColor: !settings.geminiApiKey ? '#E74C3C' : undefined
                          }}
                        />
                        <FormDescription>
                          {getMessage("geminiApiKeyDescription", "<a href=\"https://ai.google.dev/\" target=\"_blank\" rel=\"noopener noreferrer\" style={{ color: '#93C5FD', textDecoration: 'none' }}>Google AI Studio</a>") || `Get your API key from <a href="https://ai.google.dev/" target="_blank" rel="noopener noreferrer" style={{ color: '#93C5FD', textDecoration: 'none' }}>Google AI Studio</a>.`}
                        </FormDescription>
                      </FormGroup>
                    </SubContainer>
                    
                    <SubContainer>
                      <FormGroup>
                        <FormLabel>{getMessage("geminiModelLabel") || "Gemini Model"}</FormLabel>
                        <FormDescription>{getMessage("geminiModelDescription") || "Select which Gemini model version to use."}</FormDescription>
                        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(1, minmax(0, 1fr))', gap: '12px' }}>
                          {GEMINI_MODELS.map((model) => (
                            <ModelOption
                              key={model.value}
                              model={model}
                              selected={settings.geminiModel === model.value}
                              onChange={() => {
                                setSettings(prev => ({ ...prev, geminiModel: model.value }));
                                // Auto-save only if API key exists
                                if (settings.geminiApiKey) {
                                  setTimeout(() => handleSave(), 100);
                                }
                              }}
                            />
                          ))}
                        </div>
                      </FormGroup>
                    </SubContainer>
                  </SectionContainer>
                )}

                {settings.modelType === "grok" && (
                  <SectionContainer>
                    <SectionHeader>{getMessage("grokConfigurationHeader") || "Grok Configuration"}</SectionHeader>
                    <SubContainer>
                      <FormGroup>
                        <FormLabel htmlFor="xaiApiKey">
                          {getMessage("xaiApiKeyLabel") || "xAI API Key"}
                          {!settings.xaiApiKey && <RequiredLabel />}
                        </FormLabel>
                        <FormInput
                          type="password"
                          id="xaiApiKey"
                          value={settings.xaiApiKey}
                          onChange={(e) => {
                            const newApiKey = e.target.value;
                            setSettings(prev => ({ ...prev, xaiApiKey: newApiKey }));
                            // Auto-save when API key is provided (and not empty)
                            if (newApiKey.trim()) {
                              setTimeout(() => handleSave(), 100);
                            }
                          }}
                          onBlur={handleSave}
                          placeholder={getMessage("xaiApiKeyPlaceholder") || "Enter your xAI API key"}
                          style={{
                            borderColor: !settings.xaiApiKey ? '#E74C3C' : undefined
                          }}
                        />
                        <FormDescription>
                          {getMessage("xaiApiKeyDescription", "<a href=\"https://x.ai/api\" target=\"_blank\" rel=\"noopener noreferrer\" style={{ color: '#93C5FD', textDecoration: 'none' }}>x.ai</a>") || `Get your API key from <a href="https://x.ai/api" target="_blank" rel="noopener noreferrer" style={{ color: '#93C5FD', textDecoration: 'none' }}>x.ai</a>.`}
                        </FormDescription>
                      </FormGroup>
                    </SubContainer>
                    
                    <SubContainer>
                      <FormGroup>
                        <FormLabel>{getMessage("grokModelLabel") || "Grok Model"}</FormLabel>
                        <FormDescription>{getMessage("grokModelDescription") || "Select which Grok model version to use."}</FormDescription>
                        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(1, minmax(0, 1fr))', gap: '12px' }}>
                          {GROK_MODELS.map((model) => (
                            <ModelOption
                              key={model.value}
                              model={model}
                              selected={settings.grokModel === model.value}
                              onChange={() => {
                                setSettings(prev => ({ ...prev, grokModel: model.value }));
                                // Auto-save only if API key exists
                                if (settings.xaiApiKey) {
                                  setTimeout(() => handleSave(), 100);
                                }
                              }}
                              showPrice={true}
                            />
                          ))}
                        </div>
                      </FormGroup>
                    </SubContainer>
                  </SectionContainer>
                )}

                {settings.modelType === "local" && (
                  <SectionContainer>
                    <SectionHeader>{getMessage("ollamaConfigurationHeader") || "Ollama Configuration"}</SectionHeader>
                    <SubContainer>
                      <FormGroup>
                        <FormLabel htmlFor="serverUrl">
                          {getMessage("ollamaServerUrlLabel") || "Ollama Server URL"}
                          {!settings.serverUrl && <RequiredLabel />}
                        </FormLabel>
                        <FormInput
                          type="text"
                          id="serverUrl"
                          value={settings.serverUrl || ""}
                          onChange={handleServerUrlChange}
                          onBlur={handleSave}
                          placeholder={getMessage("ollamaServerUrlPlaceholder") || "http://localhost:11434"}
                          style={{
                            borderColor: !settings.serverUrl ? '#E74C3C' : undefined
                          }}
                        />
                        <FormDescription>
                          {getMessage("ollamaServerUrlDescription", "<code style={{ backgroundColor: '#444444', padding: '2px 4px', borderRadius: '4px' }}>http://localhost:11434</code>") || `The URL of your Ollama server. Default is <code style={{ backgroundColor: '#444444', padding: '2px 4px', borderRadius: '4px' }}>http://localhost:11434</code>.`}
                        </FormDescription>
                      </FormGroup>
                    </SubContainer>
                    
                    <SubContainer>
                      <FormGroup>
                        <FormLabel>{getMessage("localModelLabel") || "Local Model"}</FormLabel>
                        <FormDescription>{getMessage("localModelDescription") || "Select which local model to use with Ollama."}</FormDescription>
                        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(1, minmax(0, 1fr))', gap: '12px' }}>
                          {LOCAL_MODELS.map((model) => (
                            <ModelOption
                              key={model.value}
                              model={model}
                              selected={settings.localModel === model.value}
                              onChange={() => {
                                setSettings(prev => ({ ...prev, localModel: model.value }));
                                // Auto-save only if server URL exists
                                if (settings.serverUrl) {
                                  setTimeout(() => handleSave(), 100);
                                }
                              }}
                              showSize={true}
                            />
                          ))}
                        </div>
                      </FormGroup>
                    </SubContainer>
                  </SectionContainer>
                )}

                <SectionDivider  style={{marginBottom:"30px"}}/>

                <SectionContainer>
                  
                  <SectionHeader>{getMessage("responseSettingsHeader") || "Response Settings"}</SectionHeader>
                  <SubContainer>
                    <FormGroup>
                      <FormLabel htmlFor="maxTokens">{getMessage("maxTokensLabel") || "Max Tokens (Response Length)"}</FormLabel>
                      <FormDescription>{getMessage("maxTokensDescription") || "Maximum number of tokens (words/characters) in the AI's response."}</FormDescription>
                      <FormInput
                        type="number"
                        id="maxTokens"
                        value={settings.maxTokens}
                        onChange={(e) => setSettings(prev => ({ ...prev, maxTokens: parseInt(e.target.value) }))}
                        onBlur={handleSave}
                        min="1"
                        max="4096"
                      />
                    </FormGroup>
                  </SubContainer>
                </SectionContainer>


                {/* Auto-saves when settings change - main save button at the bottom of the options page */}
              </SettingsCard>
            </div>
          )}

          {activeTab === "prompts" && (
            <div key="prompts">
              <SettingsCard title={getMessage("promptTemplatesTitle") || "Prompt Templates"} icon={null}>
                <div style={{ marginBottom: '16px' }}>
                  <FormDescription>{getMessage("promptTemplatesDescription") || "Customize the prompts used for different AI actions. Use {'`{{selectedText}}`'} as a placeholder for the text you select on a page."}</FormDescription>
                </div>

                <div style={{ display: 'grid', gridTemplateColumns: 'repeat(1, minmax(0, 1fr))', gap: '24px' }}>
                  <SectionContainer>
                    <SectionHeader>{getMessage("promptModeHeader") || "Prompt Mode"}</SectionHeader>
                    <FormDescription>{getMessage("promptModeDescription") || "Choose how LightUp will process your selected text"}</FormDescription>
                    
                    <SectionDivider />
                    
                    <div style={{ display: 'flex', flexWrap: 'wrap', gap: '12px', marginTop: '16px' }}>
                      <ActionButton 
                        selected={activePromptMode === 'explain'}
                        onClick={() => setActivePromptMode('explain')}
                      >
                        <div style={{ fontSize: '20px', marginBottom: '4px' }}>
                          <svg width="24" height="24" viewBox="0 0 89 99" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M2.55007 23.009C0.994225 23.8875 0.0273438 25.5563 0.0273438 27.3624V71.2893C0.0273438 73.1053 0.994225 74.7642 2.55007 75.6427C10.3882 80.0649 34.2363 93.503 41.8389 97.7877C42.5849 98.2049 43.4045 98.416 44.2291 98.416C45.034 98.416 45.8389 98.2147 46.5702 97.8123C54.1727 93.6159 77.9325 80.5213 85.805 76.1777C87.3903 75.309 88.3719 73.6304 88.3719 71.8046V27.3624C88.3719 25.5563 87.405 23.8875 85.8443 23.009C78.0159 18.5967 54.2169 5.18303 46.5849 0.883599C45.8438 0.466416 45.0193 0.255371 44.1996 0.255371C43.3751 0.255371 42.5554 0.466416 41.8143 0.883599C34.1823 5.18303 10.3784 18.5967 2.55007 23.009ZM81.0098 33.3895V70.3224L47.8806 88.5901V51.397L81.0098 33.3895ZM11.0017 26.7931L44.1996 8.07877L77.5791 26.8962L44.1996 45.1344L11.0017 26.7931Z" fill="currentColor"/>
                          </svg>
                        </div>
                        <div style={{ fontWeight: '500' }}>{getMessage("explainButtonText") || "Explain"}</div>
                        {activePromptMode === 'explain' && (
                          <div style={{ position: 'absolute', top: '5px', right: '5px', color: '#2DCA6E' }}>
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                              <path d="M20 6L9 17L4 12" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                            </svg>
                          </div>
                        )}
                      </ActionButton>
                      
                      <ActionButton 
                        selected={activePromptMode === 'summarize'}
                        onClick={() => setActivePromptMode('summarize')}
                      >
                        <div style={{ fontSize: '20px', marginBottom: '4px' }}>
                          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M4 4h16v16H4V4z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                            <path d="M4 8h16M8 4v16" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                          </svg>
                        </div>
                        <div style={{ fontWeight: '500' }}>{getMessage("summarizeButtonText") || "Summarize"}</div>
                        {activePromptMode === 'summarize' && (
                          <div style={{ position: 'absolute', top: '5px', right: '5px', color: '#2DCA6E' }}>
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                              <path d="M20 6L9 17L4 12" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                            </svg>
                          </div>
                        )}
                      </ActionButton>
                      
                      <ActionButton 
                        selected={activePromptMode === 'analyze'}
                        onClick={() => setActivePromptMode('analyze')}
                      >
                        <div style={{ fontSize: '20px', marginBottom: '4px' }}>
                          <svg width="24" height="24" viewBox="0 0 96 96" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M35.9064 0.109375C16.194 0.109375 0.136719 16.1667 0.136719 35.8791C0.136719 55.5914 16.194 71.6487 35.9064 71.6487C44.44 71.6487 52.2816 68.6328 58.4391 63.6205L83.5695 95.1014C83.5695 95.1014 89.0738 95.9195 92.4913 92.358C95.9325 88.7694 95.1254 83.5488 95.1254 83.5488L63.6478 58.4117C68.6602 52.2543 71.6761 44.4127 71.6761 35.8791C71.6761 16.1667 55.6188 0.109375 35.9064 0.109375ZM35.9064 7.26397C51.7528 7.26397 64.5215 20.0327 64.5215 35.8791C64.5215 51.7254 51.7528 64.4941 35.9064 64.4941C20.06 64.4941 7.29132 51.7254 7.29132 35.8791C7.29132 20.0327 20.06 7.26397 35.9064 7.26397Z" fill="currentColor"/>
                          </svg>
                        </div>
                        <div style={{ fontWeight: '500' }}>{getMessage("analyzeButtonText") || "Analyze"}</div>
                        {activePromptMode === 'analyze' && (
                          <div style={{ position: 'absolute', top: '5px', right: '5px', color: '#2DCA6E' }}>
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                              <path d="M20 6L9 17L4 12" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                            </svg>
                          </div>
                        )}
                      </ActionButton>
                      
                      <ActionButton 
                        selected={activePromptMode === 'translate'}
                        onClick={() => setActivePromptMode('translate')}
                      >
                        <div style={{ fontSize: '20px', marginBottom: '4px' }}>
                          <svg width="24" height="24" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" d="m10.5 21 5.25-11.25L21 21m-9-3h7.5M3 5.621a48.474 48.474 0 0 1 6-.371m0 0c1.12 0 2.233.038 3.334.114M9 5.25V3m3.334 2.364C11.176 10.658 7.69 15.08 3 17.502m9.334-12.138c.896.061 1.785.147 2.666.257m-4.589 8.495a18.023 18.023 0 0 1-3.827-5.802" />
                          </svg>
                        </div>
                        <div style={{ fontWeight: '500' }}>{getMessage("translateButtonText") || "Translate"}</div>
                        {activePromptMode === 'translate' && (
                          <div style={{ position: 'absolute', top: '5px', right: '5px', color: '#2DCA6E' }}>
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                              <path d="M20 6L9 17L4 12" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                            </svg>
                          </div>
                        )}
                      </ActionButton>
                      
                      <ActionButton 
                        selected={activePromptMode === 'free'}
                        onClick={() => setActivePromptMode('free')}
                      >
                        <div style={{ fontSize: '20px', marginBottom: '4px' }}>
                          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M8 12h8M12 8v8M12 21a9 9 0 100-18 9 9 0 000 18z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                          </svg>
                        </div>
                        <div style={{ fontWeight: '500' }}>{getMessage("freeButtonText") || "Free"}</div>
                        {activePromptMode === 'free' && (
                          <div style={{ position: 'absolute', top: '5px', right: '5px', color: '#2DCA6E' }}>
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                              <path d="M20 6L9 17L4 12" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                            </svg>
                          </div>
                        )}
                      </ActionButton>
                    </div>
                  </SectionContainer>
                  
                  <SectionContainer>
                    <SectionHeader>{getMessage("promptDetailsHeader") || "Prompt Details"}</SectionHeader>
                    <FormDescription>{getMessage("promptDetailsDescription") || "View and customize the selected prompt"}</FormDescription>
                    
                    <SectionDivider />
                    
                    <div style={{ marginTop: '16px' }}>
                      <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: '8px' }}>
                        <Label>{getMessage("systemPromptLabel") || "System Prompt"}</Label>
                        <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
                          {saveSuccess && <SavedSuccessIndicator />}
                          <Button
                            variant="primary"
                            onClick={() => {
                              if (isEditingSystemPrompt) {
                                // Save the edited prompt if it's not a function-based prompt
                                if (typeof SYSTEM_PROMPTS[activePromptMode] !== 'function') {
                                  // Update the system prompts in settings
                                  const updatedSettings = {
                                    ...settings,
                                    customPrompts: {
                                      ...settings.customPrompts,
                                      systemPrompts: {
                                        ...settings.customPrompts?.systemPrompts,
                                        [activePromptMode]: editedSystemPrompt
                                      }
                                    }
                                  };
                                  
                                  // Update state and storage
                                  setSettings(updatedSettings);
                                  storage.set("settings", updatedSettings);
                                  
                                  // Show success feedback
                                  setSaveSuccess(true);
                                  setTimeout(() => setSaveSuccess(false), 2000);
                                }
                                setIsEditingSystemPrompt(false);
                              } else {
                                // Get the current prompt - use custom if available, otherwise default
                                const currentPrompt = settings.customPrompts?.systemPrompts?.[activePromptMode] || 
                                  (typeof SYSTEM_PROMPTS[activePromptMode] !== 'function' ? 
                                   SYSTEM_PROMPTS[activePromptMode] as string : 
                                   'Cannot edit function-based prompts');
                                
                                setEditedSystemPrompt(currentPrompt);
                                setIsEditingSystemPrompt(true);
                              }
                            }}
                          >
                            {isEditingSystemPrompt ? (getMessage("saveButtonText") || 'Save') : (getMessage("editButtonText") || 'Edit')}
                          </Button>
                        </div>
                      </div>
                      <Description style={{ marginBottom: '12px' }}>{getMessage("systemPromptDescription") || "Instructions that guide the AI's behavior"}</Description>
                      
                      {isEditingSystemPrompt ? (
                        <FormTextarea
                          value={editedSystemPrompt}
                          onChange={(e) => setEditedSystemPrompt(e.target.value)}
                          rows={6}
                          style={{ 
                            backgroundColor: '#333', 
                            color: '#fff',
                            border: '1px solid #555',
                            borderRadius: '8px',
                           
                            fontFamily: 'monospace',
                            fontSize: '14px',
                            width: '100%',
                            resize: 'vertical',
                              padding: '19px',
                          lineHeight: '28px'
                          }}
                        />
                      ) : (
                        <div style={{ 
                          backgroundColor: '#444', 
                         
                          borderRadius: '8px',
                          border: '1px solid #555',
                          color: '#eee',
                          fontSize: '14px',
                          fontFamily: 'monospace',
                          whiteSpace: 'pre-wrap',
                          maxHeight: '120px',
                          overflowY: 'auto',
                            padding: '19px',
                          lineHeight: '28px'
                        }}>
                          {typeof SYSTEM_PROMPTS[activePromptMode] === 'function' 
                            ? getMessage("functionPromptPlaceholder") || '(Function not displayed)' 
                            : settings.customPrompts?.systemPrompts?.[activePromptMode] || SYSTEM_PROMPTS[activePromptMode]}
                        </div>
                      )}
                    </div>
                    
                    <div style={{ marginTop: '24px' }}>
                      <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: '8px' }}>
                        <Label>{getMessage("userPromptLabel") || "User Prompt"}</Label>
                        <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
                          {saveSuccess && <SavedSuccessIndicator />}
                          <Button
                            variant="primary"
                            onClick={() => {
                              if (isEditingUserPrompt) {
                                // Save the edited prompt if it's not a function-based prompt
                                if (typeof USER_PROMPTS[activePromptMode] !== 'function') {
                                  // Update the user prompts in settings
                                  const updatedSettings = {
                                    ...settings,
                                    customPrompts: {
                                      ...settings.customPrompts,
                                      userPrompts: {
                                        ...settings.customPrompts?.userPrompts,
                                        [activePromptMode]: editedUserPrompt
                                      }
                                    }
                                  };
                                  
                                  // Update state and storage
                                  setSettings(updatedSettings);
                                  storage.set("settings", updatedSettings);
                                  
                                  // Show success feedback
                                  setSaveSuccess(true);
                                  setTimeout(() => setSaveSuccess(false), 2000);
                                }
                                setIsEditingUserPrompt(false);
                              } else {
                                // Get the current prompt - use custom if available, otherwise default
                                const currentPrompt = settings.customPrompts?.userPrompts?.[activePromptMode] || 
                                  (typeof USER_PROMPTS[activePromptMode] !== 'function' ? 
                                   USER_PROMPTS[activePromptMode] as string : 
                                   getMessage('cannotEditFunctionPrompt') || 'Cannot edit function-based prompts');
                                
                                setEditedUserPrompt(currentPrompt);
                                setIsEditingUserPrompt(true);
                              }
                            }}
                          >
                            {isEditingUserPrompt ? (getMessage("saveButtonText") || 'Save') : (getMessage("editButtonText") || 'Edit')}
                          </Button>
                        </div>
                      </div>
                      <Description style={{ marginBottom: '12px' }}>{getMessage("userPromptDescription") || "Template for how your selection is sent to the AI"}</Description>
                      
                      {isEditingUserPrompt ? (
                        <FormTextarea
                          value={editedUserPrompt}
                          onChange={(e) => setEditedUserPrompt(e.target.value)}
                          rows={6}
                          style={{ 
                            backgroundColor: '#333', 
                            color: '#fff',
                            border: '1px solid #555',
                            borderRadius: '8px',
                            
                            fontFamily: 'monospace',
                            fontSize: '14px',
                            width: '100%',
                            resize: 'vertical',
                            padding: '19px',
                          lineHeight: '28px'
                          }}
                        />
                      ) : (
                        <div style={{ 
                          backgroundColor: '#444', 
                         
                          borderRadius: '8px',
                          border: '1px solid #555',
                          color: '#eee',
                          fontSize: '14px',
                          fontFamily: 'monospace',
                          whiteSpace: 'pre-wrap',
                          maxHeight: '120px',
                          overflowY: 'auto',
                          padding: '19px',
                          lineHeight: '28px'
                        }}>
                          {typeof USER_PROMPTS[activePromptMode] === 'function' 
                            ? getMessage("dynamicTemplatePlaceholder") || `(Dynamic template - varies based on your selected text)` 
                            : settings.customPrompts?.userPrompts?.[activePromptMode] || USER_PROMPTS[activePromptMode]}
                        </div>
                      )}
                    </div>
                    
                    {/* Reset Template Section */}
                    <div style={{ marginTop: '32px', padding: '16px', backgroundColor: '#333', borderRadius: '8px', border: '1px solid #444' }}>
                      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                        <div>
                          <Label>{getMessage("resetTemplateLabel") || "Reset Current Template"}</Label>
                          <Description style={{ marginTop: '4px' }}>
                            {getMessage("resetTemplateDescription", [activePromptMode]) || `Restore the ${activePromptMode} template to its default prompts`}
                          </Description>
                        </div>
                        <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
                          {saveSuccess && <SavedSuccessIndicator message={getMessage("resetSuccessText")} />}
                          <Button
                            variant="destructive"
                            onClick={() => {
                              const updatedSettings = {
                                ...settings,
                                customPrompts: {
                                  ...settings.customPrompts,
                                  systemPrompts: {
                                    ...settings.customPrompts?.systemPrompts,
                                    [activePromptMode]: undefined
                                  },
                                  userPrompts: {
                                    ...settings.customPrompts?.userPrompts,
                                    [activePromptMode]: undefined
                                  }
                                }
                              };
                              
                              setSettings(updatedSettings);
                              storage.set("settings", updatedSettings);
                              
                              setSaveSuccess(true);
                              setTimeout(() => setSaveSuccess(false), 2000);
                            }}
                          >
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style={{ marginRight: '6px' }}>
                              <path d="M3 6h18M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2m3 0v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6h14zM10 11v6M14 11v6" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                            </svg>
                            {getMessage("resetToDefaultButtonText") || "Reset to Default"}
                          </Button>
                        </div>
                      </div>
                    </div>
                  </SectionContainer>
                </div>
              </SettingsCard>
              
              {/* No popup notification - we use inline notifications instead */}
              
              {/* Instructions for applying templates */}
              <div style={{
                marginTop: '24px',
                padding: '12px 16px',
                backgroundColor: '#444',
                borderRadius: '8px',
                border: '1px solid #555'
              }}>
                <p style={{ fontSize: '14px', color: '#CCC', margin: '0 0 8px 0' }}>
                  <strong>How to apply your custom templates:</strong>
                </p>
                <ul style={{ fontSize: '14px', color: '#CCC', margin: '0', paddingLeft: '16px' }}>
                  <li style={{ marginBottom: '4px' }}>Custom templates apply to all new conversations</li>
                  <li style={{ marginBottom: '4px' }}>To apply changes to an existing conversation, close and reopen the popup</li>
                  <li>For global action button, changes are applied immediately</li>
                </ul>
              </div>
            </div>
          )}

          {activeTab === "customization" && (
            <div key="customization">
              <SettingsCard title={getMessage("customizationTabTitle") || "Customization"} icon={null}>
                <SectionContainer>
                  <SectionHeader>{getMessage("appearanceSectionHeader") || "Appearance"}</SectionHeader>
                  
                  <div>
                    <Label>{getMessage("themeLabel") || "Theme"}</Label>
                    <Description>{getMessage("themeDescription") || "Choose your preferred color theme"}</Description>
                    
                    <div style={{ display: 'flex', gap: '12px', marginTop: '16px' }}>
                      <ThemeButton 
                        selected={settings.customization?.theme === 'dark'}
                        onClick={() => handleImmediateSettingUpdate('theme', 'dark')}
                      >
                        <ThemeIcon>
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                      </svg>
                        </ThemeIcon>
                        <div>{getMessage("darkThemeText") || "Dark Theme"}</div>
                      </ThemeButton>
                      
                      <ThemeButton 
                        selected={settings.customization?.theme === 'light'}
                        onClick={() => handleImmediateSettingUpdate('theme', 'light')}
                      >
                        <ThemeIcon>
                          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M12 17C14.7614 17 17 14.7614 17 12C17 9.23858 14.7614 7 12 7C9.23858 7 7 9.23858 7 12C7 14.7614 9.23858 17 12 17Z" fill="white"/>
                            <path d="M12 1V3M12 21V23M4.22 4.22L5.64 5.64M18.36 18.36L19.78 19.78M1 12H3M21 12H23M4.22 19.78L5.64 18.36M18.36 5.64L19.78 4.22" stroke="white" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                          </svg>
                        </ThemeIcon>
                        <div>{getMessage("lightThemeText") || "Light Theme"}</div>
                      </ThemeButton>
                      
                      <ThemeButton 
                        selected={settings.customization?.theme === 'system'}
                        onClick={() => handleImmediateSettingUpdate('theme', 'system')}
                      >
                        <ThemeIcon>
                          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <rect x="2" y="4" width="20" height="15" rx="2" stroke="white" strokeWidth="2"/>
                            <path d="M8 19V21" stroke="white" strokeWidth="2"/>
                            <path d="M16 19V21" stroke="white" strokeWidth="2"/>
                            <path d="M8 21H16" stroke="white" strokeWidth="2"/>
                          </svg>
                        </ThemeIcon>
                        <div>{getMessage("systemDefaultThemeText") || "System Default"}</div>
                      </ThemeButton>
                    </div>
                  </div>
                  
                  <div style={{ marginTop: '32px' }}>
                    <Label>{getMessage("languageLabel") || "Language"}</Label>
                    <Description>{getMessage("languageDesc") || "Choose your preferred language"}</Description>
                    
                    <div style={{ marginTop: '16px', maxWidth: '240px' }}>
                      <LanguageSelector 
                        onChange={(newLocale) => {
                          // Change the locale using the useLocale hook
                          changeLocale(newLocale).then(() => {
                            // Show notification that language has been changed
                            addToast({
                              type: 'success',
                              title: getMessage('languageChanged') || 'Language Changed',
                              message: getMessage('languageChangeMessage') || 'UI will update to reflect your language choice',
                              duration: 3000
                            });
                          }).catch(error => {
                            console.error('Error changing locale:', error);
                            addToast({
                              type: 'error',
                              title: getMessage('languageChangeError') || 'Error',
                              message: getMessage('languageChangeErrorMessage') || 'Failed to change language',
                              duration: 5000
                            });
                          });
                        }}
                      />
                    </div>
                  </div>
                  
                  <SectionDivider />
                  
                  <div style={{ marginTop: '32px' }}>
                    <Label>{getMessage("languageLabel") || "Language"}</Label>
                    <Description>{getMessage("languageDesc") || "Choose your preferred language"}</Description>
                    
                    <div style={{ marginTop: '16px', maxWidth: '240px' }}>
                      <LanguageSelector 
                        onChange={(newLocale) => {
                          // Change the locale using the useLocale hook
                          changeLocale(newLocale).then(() => {
                            // Show notification that language has been changed
                            addToast({
                              type: 'success',
                              title: getMessage('languageChanged') || 'Language Changed',
                              message: getMessage('languageChangeMessage') || 'UI will update to reflect your language choice',
                              duration: 3000
                            });
                          }).catch(error => {
                            console.error('Error changing locale:', error);
                            addToast({
                              type: 'error',
                              title: getMessage('languageChangeError') || 'Error',
                              message: getMessage('languageChangeErrorMessage') || 'Failed to change language',
                              duration: 5000
                            });
                          });
                        }}
                      />
                    </div>
                  </div>
                  
                  <SectionDivider />
                  
                  <div style={{ marginTop: '32px' }}>
                    <Label>{getMessage("fontSizeLabel") || "Font Size"}</Label>
                    <Description>{getMessage("fontSizeDescription") || "Adjust the text size of the LightUp popup content"}</Description>
                    
                    <div style={{ display: 'flex', flexWrap: 'wrap', gap: '12px', marginTop: '16px' }}>
                      <FontSizeButton 
                        selected={settings.customization?.fontSize === 'x-small'}
                        onClick={() => handleImmediateSettingUpdate('fontSize', 'x-small')}
                      >
                        <div className="size-preview" style={{ fontSize: '13px' }}>Aa</div>
                        <div className="size-label">{getMessage("fontSizeXSmall") || "X-Small"}</div>
                      </FontSizeButton>
                       
                      <FontSizeButton 
                        selected={settings.customization?.fontSize === 'small'}
                        onClick={() => handleImmediateSettingUpdate('fontSize', 'small')}
                      >
                        <div className="size-preview" style={{ fontSize: '14px' }}>Aa</div>
                        <div className="size-label">{getMessage("fontSizeSmall") || "Small"}</div>
                      </FontSizeButton>
                       
                      <FontSizeButton 
                        selected={settings.customization?.fontSize === 'medium'}
                        onClick={() => handleImmediateSettingUpdate('fontSize', 'medium')}
                      >
                        <div className="size-preview" style={{ fontSize: '16px' }}>Aa</div>
                        <div className="size-label">{getMessage("fontSizeMedium") || "Medium"}</div>
                      </FontSizeButton>
                       
                      <FontSizeButton 
                        selected={settings.customization?.fontSize === 'large'}
                        onClick={() => handleImmediateSettingUpdate('fontSize', 'large')}
                      >
                        <div className="size-preview" style={{ fontSize: '18px' }}>Aa</div>
                        <div className="size-label">{getMessage("fontSizeLarge") || "Large"}</div>
                      </FontSizeButton>
                       
                      <FontSizeButton 
                        selected={settings.customization?.fontSize === 'x-large'}
                        onClick={() => handleImmediateSettingUpdate('fontSize', 'x-large')}
                      >
                        <div className="size-preview" style={{ fontSize: '21px' }}>Aa</div>
                        <div className="size-label">{getMessage("fontSizeXLarge") || "X-Large"}</div>
                      </FontSizeButton>

                      <FontSizeButton 
                        selected={settings.customization?.fontSize === 'xx-large'}
                        onClick={() => handleImmediateSettingUpdate('fontSize', 'xx-large')}
                      >
                        <div className="size-preview" style={{ fontSize: '23px' }}>Aa</div>
                        <div className="size-label">{getMessage("fontSizeXXLarge") || "XX-Large"}</div>
                      </FontSizeButton>
                    </div>
                  </div>
                  
                  <div style={{ marginTop: '32px' }}>
                    <Label>{getMessage("highlightColorLabel") || "Highlight Color"}</Label>
                    <Description>{getMessage("highlightColorDescription") || "Choose the color for text highlighting"}</Description>
                    
                    <div style={{ display: 'flex', flexWrap: 'wrap', gap: '12px', marginTop: '16px' }}>
                      {[
                        { value: 'default', label: getMessage("colorDefault") || 'Default', color: 'linear-gradient(45deg, rgb(211, 232, 255), rgb(197, 225, 255))' },
                        { value: 'yellow', label: getMessage("colorYellow") || 'Yellow', color: '#fff8bc' },
                        { value: 'orange', label: getMessage("colorOrange") || 'Orange', color: '#FFBF5A' },
                        { value: 'blue', label: getMessage("colorBlue") || 'Blue', color: '#93C5FD' },
                        { value: 'green', label: getMessage("colorGreen") || 'Green', color: '#86EFAC' },
                        { value: 'purple', label: getMessage("colorPurple") || 'Purple', color: '#C4B5FD' },
                        { value: 'pink', label: getMessage("colorPink") || 'Pink', color: '#FDA4AF' }
                      ].map(colorOption => (
                        <div 
                          key={colorOption.value}
                          style={{
                            width: '75px',
                            display: 'flex',
                            flexDirection: 'column',
                            alignItems: 'center',
                            gap: '8px'
                          }}
                        >
                          <div 
                            onClick={() => handleImmediateSettingUpdate('highlightColor', colorOption.value)}
                            style={{
                              width: '36px',
                              height: '36px',
                              borderRadius: '50%',
                              background: colorOption.color,
                              backgroundColor: colorOption.value === 'default' ? undefined : colorOption.color,
                              border: colorOption.value === (settings.customization?.highlightColor || 'default') ? `2px solid #2DCA6E` : '2px solid transparent',
                              cursor: 'pointer',
                              display: 'flex',
                              alignItems: 'center',
                              justifyContent: 'center',
                              transition: 'all 0.2s ease-in-out'
                            }}
                          >
                            {colorOption.value === (settings.customization?.highlightColor || 'default') && (
                              <svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M5 13l4 4L19 7" stroke="#333" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                              </svg>
                            )}
                          </div>
                          <span style={{ fontSize: '12px', color: 'rgba(255, 255, 255, 0.8)' }}>{colorOption.label}</span>
                        </div>
                      ))}
                    </div>
                  </div>
                </SectionContainer>
                <SectionContainer>
                  <SectionHeader>{getMessage("animationSettingsHeader") || "Animation Settings"}</SectionHeader>
                  <FormGroup>
                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                      <FormLabel htmlFor="popupAnimation">{getMessage("popupAnimationLabel") || "Popup Animation"}</FormLabel>
                      <FormSelect
                        id="popupAnimation"
                        value={settings.customization?.popupAnimation}
                        onChange={(e) => handleImmediateSettingUpdate('popupAnimation', e.target.value)}
                        style={{ minWidth: '140px' }}
                      >
                        <option value="fade">{getMessage("animationFade") || "Fade"}</option>
                        <option value="slide">{getMessage("animationSlide") || "Slide"}</option>
                        <option value="scale">{getMessage("animationScale") || "Scale"}</option>
                        <option value="none">{getMessage("animationNone") || "None"}</option>
                      </FormSelect>
                    </div>
                    <FormDescription>
                      {getMessage("popupAnimationDescription") || "Choose how the popup appears when activated"}
                    </FormDescription>
                  </FormGroup>
                </SectionContainer>
              </SettingsCard>
            </div>
          )}

          {/* Feedback */}
          {activeTab === "feedback" && (
            <div key="feedback">
              <SettingsCard title={getMessage("feedbackTitle") || "Provide Feedback"} icon={null}>
                <SectionContainer>
                  <div style={{ marginBottom: '16px' }}>
                    <Description>{getMessage("feedbackDesc") || "Help us improve the extension by sharing your experience"}</Description>
                  </div>
                  
                  <div style={{ background: '#333333', borderRadius: '8px', padding: '20px', marginTop: '16px' }}>
                    <FormGroup>
                      <FormLabel htmlFor="feedback-type" style={{ marginBottom: '8px' }}>{getMessage("feedbackTypeLabel") || "Feedback Type"}</FormLabel>
                      <FormDescription style={{ marginBottom: '8px' }}>{getMessage("feedbackTypeDesc") || "Select the type of feedback you'd like to provide"}</FormDescription>
                      <FormSelect id="feedback-type" defaultValue="general">
                        <option value="general">{getMessage("feedbackTypeGeneral") || "General Feedback"}</option>
                        <option value="bug">{getMessage("feedbackTypeBug") || "Bug Report"}</option>
                        <option value="feature">{getMessage("feedbackTypeFeature") || "Feature Request"}</option>
                        <option value="other">{getMessage("feedbackTypeOther") || "Other"}</option>
                      </FormSelect>
                    </FormGroup>
                    
                    <FormGroup style={{ marginTop: '16px' }}>
                      <FormLabel htmlFor="feedback-content" style={{ marginBottom: '8px' }}>{getMessage("feedbackContentLabel") || "Your Feedback"}</FormLabel>
                      <FormDescription style={{ marginBottom: '8px' }}>{getMessage("feedbackContentDesc") || "Tell us what you think or describe the issue you're experiencing..."}</FormDescription>
                      <textarea 
                        id="feedback-content" 
                        placeholder={getMessage("feedbackContentPlaceholder") || "Type your feedback here..."}
                        style={{
                          width: "100%",
                          backgroundColor: "#444",
                          color: "#fff",
                          border: "1px solid #555",
                          borderRadius: '6px',
                          padding: '10px',
                          minHeight: '120px',
                          fontSize: '14px',
                          resize: 'vertical'
                        }}
                      />
                    </FormGroup>
                    
                    <FormGroup style={{ marginTop: '16px' }}>
                      <FormLabel htmlFor="feedback-email" style={{ marginBottom: '8px' }}>{getMessage("feedbackEmailLabel") || "Email (optional)"}</FormLabel>
                      <FormDescription style={{ marginBottom: '8px' }}>{getMessage("feedbackEmailDesc") || "If you'd like us to follow up with you"}</FormDescription>
                      <input 
                        type="email" 
                        id="feedback-email" 
                        placeholder={getMessage("feedbackEmailPlaceholder") || "your.email@example.com"}
                        style={{
                          width: "100%",
                          backgroundColor: "#444",
                          color: "#fff",
                          border: "1px solid #555",
                          borderRadius: '6px',
                          padding: '10px',
                          fontSize: '14px'
                        }}
                      />
                    </FormGroup>
                    
                    <div style={{ marginTop: '24px', display: 'flex', justifyContent: 'flex-end' }}>
                      <Button variant="primary">{getMessage("submitFeedbackButton") || "Submit Feedback"}</Button>
                    </div>
                  </div>
                </SectionContainer>
              </SettingsCard>
            </div>
          )}
          
          {/* About */}
          {activeTab === "about" && (
            <div key="about">
              <SettingsCard title={getMessage("aboutTabTitle") || "About LightUp"} icon={null}>
                <SectionContainer>
                  <div style={{ display: 'flex', alignItems: 'center', marginBottom: '24px' }}>
                    <img 
                      src={logoUrl} 
                      alt="LightUp Logo" 
                      style={{ 
                        width: '48px', 
                        height: '48px', 
                        marginRight: '16px', 
                        borderRadius: '12px',
                        boxShadow: '0 2px 8px rgba(0, 0, 0, 0.3)'
                      }} 
                    />
                    <div>
                      <h2 style={{ fontSize: '24px', fontWeight: 700, margin: 0, color: '#FFFFFF' }}>LightUp</h2>
                      <p style={{ fontSize: '16px', color: 'rgba(255, 255, 255, 0.7)', margin: '4px 0 0 0' }}>{getMessage("aboutSubtitle") || "AI-Powered Web Annotations"}</p>
                    </div>
                  </div>
                  
                  <div style={{ marginBottom: '24px', fontSize: '15px', lineHeight: '1.6' }}>
                    {getMessage("aboutDescription") || "Transform your online reading with LightUp, the ultimate Chrome extension for summarizing, translating, and annotating selected text on any webpage. Whether you're a student, professional, researcher, or curious learner, LightUp leverages advanced AI to provide instant summaries, seamless translations, and insightful annotations right at your fingertips."}
                  </div>
                  
                  <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: '16px', marginBottom: '24px' }}>
                    <div style={{ padding: '16px', background: 'rgba(45, 202, 110, 0.08)', borderRadius: '8px', border: '1px solid rgba(45, 202, 110, 0.2)' }}>
                      <div style={{ display: 'flex', alignItems: 'center', marginBottom: '8px' }}>
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style={{ marginRight: '8px', color: '#2DCA6E' }}>
                          <path d="M4 6h16M4 12h16M4 18h7" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                        </svg>
                        <span style={{ fontWeight: 600, color: '#FFFFFF', fontSize: '14px' }}>{getMessage("featureInstantSummaries") || "Instant Summaries"}</span>
                      </div>
                      <p style={{ margin: 0, fontSize: '13px', color: 'rgba(255, 255, 255, 0.75)' }}>
                        {getMessage("featureInstantSummariesDesc") || "Get concise summaries of selected text to quickly grasp key points"}
                      </p>
                    </div>

                    <div style={{ padding: '16px', background: 'rgba(0, 120, 212, 0.08)', borderRadius: '8px', border: '1px solid rgba(0, 120, 212, 0.2)' }}>
                      <div style={{ display: 'flex', alignItems: 'center', marginBottom: '8px' }}>
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style={{ marginRight: '8px', color: '#0078D4' }}>
                          <path d="M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                        </svg>
                        <span style={{ fontWeight: 600, color: '#FFFFFF', fontSize: '14px' }}>{getMessage("featureTranslation") || "Real-Time Translation"}</span>
                      </div>
                      <p style={{ margin: 0, fontSize: '13px', color: 'rgba(255, 255, 255, 0.75)' }}>
                        {getMessage("featureTranslationDesc") || "Break language barriers with immediate translations of any selected content"}
                      </p>
                    </div>

                    <div style={{ padding: '16px', background: 'rgba(156, 39, 176, 0.08)', borderRadius: '8px', border: '1px solid rgba(156, 39, 176, 0.2)' }}>
                      <div style={{ display: 'flex', alignItems: 'center', marginBottom: '8px' }}>
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style={{ marginRight: '8px', color: '#9C27B0' }}>
                          <path d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                        </svg>
                        <span style={{ fontWeight: 600, color: '#FFFFFF', fontSize: '14px' }}>{getMessage("featureAdvancedModels") || "Advanced AI Models"}</span>
                      </div>
                      <p style={{ margin: 0, fontSize: '13px', color: 'rgba(255, 255, 255, 0.75)' }}>
                        {getMessage("featureAdvancedModelsDesc") || "Choose from Grok, Gemini, and local models for versatile applications"}
                      </p>
                    </div>

                    <div style={{ padding: '16px', background: 'rgba(255, 193, 7, 0.08)', borderRadius: '8px', border: '1px solid rgba(255, 193, 7, 0.2)' }}>
                      <div style={{ display: 'flex', alignItems: 'center', marginBottom: '8px' }}>
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style={{ marginRight: '8px', color: '#FFC107' }}>
                          <path d="M8 12m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0M19 12m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0M3 21l1.65 -3.8a9 9 0 1 1 3.4 2.9L3 21" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                        </svg>
                        <span style={{ fontWeight: 600, color: '#FFFFFF', fontSize: '14px' }}>{getMessage("featureInteractiveChat") || "Interactive Chat"}</span>
                      </div>
                      <p style={{ margin: 0, fontSize: '13px', color: 'rgba(255, 255, 255, 0.75)' }}>
                        {getMessage("featureInteractiveChatDesc") || "Engage with chat-style follow-up questions to clarify and expand understanding"}
                      </p>
                    </div>
                  </div>
                  
                  <div style={{ display: 'flex', flexDirection: 'column', gap: '12px', marginBottom: '24px' }}>
                    <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
                      <span style={{ color: 'rgba(255, 255, 255, 0.7)', fontSize: '14px', fontWeight: 500, minWidth: '80px' }}>{getMessage("aboutVersion") || "Version:"}</span>
                      <Badge variant="info">v0.1.13</Badge>
                    </div>
                    
                    <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
                      <span style={{ color: 'rgba(255, 255, 255, 0.7)', fontSize: '14px', fontWeight: 500, minWidth: '80px' }}>{getMessage("aboutDeveloper") || "Developer:"}</span>
                      <span style={{ color: '#FFFFFF', fontSize: '14px' }}>Moe Sadiq</span>
                    </div>
                    
                    <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
                      <span style={{ color: 'rgba(255, 255, 255, 0.7)', fontSize: '14px', fontWeight: 500, minWidth: '80px' }}>{getMessage("aboutWebsite") || "Website:"}</span>
                      <a 
                        href="https://www.boimaginations.com/lightup" 
                        target="_blank" 
                        rel="noopener noreferrer" 
                        style={{ color: '#93C5FD', textDecoration: 'none', fontSize: '14px', display: 'flex', alignItems: 'center', gap: '6px' }}
                        onMouseOver={(e) => e.currentTarget.style.textDecoration = 'underline'}
                        onMouseOut={(e) => e.currentTarget.style.textDecoration = 'none'}
                      >
                        boimaginations.com/lightup
                        <svg width="14" height="14" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <path d="M18 13v6a2 2 0 01-2 2H5a2 2 0 01-2-2V8a2 2 0 012-2h6m4-3h6v6m-11 5L21 3" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                        </svg>
                      </a>
                    </div>
                    
                    <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
                      <span style={{ color: 'rgba(255, 255, 255, 0.7)', fontSize: '14px', fontWeight: 500, minWidth: '80px' }}>{getMessage("contact") || "Contact"}:</span>
                      <a 
                        href="mailto:boimaginations@gmail.com" 
                        target="_blank" 
                        rel="noopener noreferrer" 
                        style={{ color: '#93C5FD', textDecoration: 'none', fontSize: '14px' }}
                        onMouseOver={(e) => e.currentTarget.style.textDecoration = 'underline'}
                        onMouseOut={(e) => e.currentTarget.style.textDecoration = 'none'}
                      >
                        boimaginations@gmail.com
                      </a>
                    </div>
                  </div>
                </SectionContainer>

                <SectionDivider />

                <SectionContainer>
                  <SectionHeader>{getMessage("feedbackTitle") || "Feedback"}</SectionHeader>
                  <FormDescription style={{ marginBottom: '16px' }}>{getMessage("feedbackDesc") || "Help us improve the extension by sharing your experience"}</FormDescription>
                  
                  <Button
                    variant="primary"
                    onClick={() => window.open('https://boi.featurebase.app/', '_blank')}
                    style={{ display: 'flex', alignItems: 'center', gap: '8px', marginBottom: '16px' }}
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor" style={{ width: '20px', height: '20px' }}>
                      <path strokeLinecap="round" strokeLinejoin="round" d="M8.625 12a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Zm0 0H8.25m4.125 0a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Zm0 0H12m4.125 0a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Zm0 0h-.375M21 12c0 4.556-4.03 8.25-9 8.25a9.764 9.764 0 0 1-2.555-.337A5.972 5.972 0 0 1 5.41 20.97a5.969 5.969 0 0 1-.474-.065 4.48 4.48 0 0 0 .978-2.025c.09-.457-.133-.901-.467-1.226C3.93 16.178 3 14.189 3 12c0-4.556 4.03-8.25 9-8.25s9 3.694 9 8.25Z" />
                    </svg>
                    {getMessage("feedbackLabel") || "Provide Feedback"}
                  </Button>
                </SectionContainer>

                <SectionDivider />

                <SectionContainer>
                  <SectionHeader>{getMessage("privacyTitle") || "Privacy Policy"}</SectionHeader>
                  <FormDescription style={{ marginBottom: '16px' }}>{getMessage("privacyDesc") || "How we handle your data and protect your privacy"}</FormDescription>
                  
                  <div style={{ background: '#333333', borderRadius: '8px', padding: '24px', marginTop: '16px' }}>
                    <div style={{ display: 'flex', alignItems: 'center', marginBottom: '24px' }}>
                      <svg width="28" height="28" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" strokeWidth="1.5" stroke="currentColor" style={{ marginRight: '12px', color: '#2DCA6E' }}>
                        <path strokeLinecap="round" strokeLinejoin="round" d="M3.98 8.223A10.477 10.477 0 0 0 1.934 12C3.226 16.338 7.244 19.5 12 19.5c.993 0 1.953-.138 2.863-.395M6.228 6.228A10.451 10.451 0 0 1 12 4.5c4.756 0 8.773 3.162 10.065 7.498a10.522 10.522 0 0 1-4.293 5.774M6.228 6.228 3 3m3.228 3.228 3.65 3.65m7.894 7.894L21 21m-3.228-3.228-3.65-3.65m0 0a3 3 0 1 0-4.243-4.243m4.242 4.242L9.88 9.88" />
                      </svg>
                      <h3 style={{ fontSize: '20px', fontWeight: 600, margin: 0, color: '#FFFFFF' }}>{getMessage("zeroDataCollectionTitle") || "Zero Data Collection"}</h3>
                    </div>
                    
                    <div style={{ fontSize: '14px', color: 'rgba(255, 255, 255, 0.85)', lineHeight: '1.6', marginBottom: '28px' }}>
                      <p style={{ margin: '0 0 20px 0', fontSize: '15px' }}>
                        {getMessage("privacyMainText") || "LightUp does not collect, store, or track any personal information. All processing happens locally or directly with your chosen AI service."}
                      </p>
                    </div>

                    <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))', gap: '18px', marginBottom: '32px' }}>
                      <div style={{ padding: '20px', background: 'rgba(45, 202, 110, 0.08)', borderRadius: '10px', border: '1px solid rgba(45, 202, 110, 0.2)' }}>
                        <div style={{ display: 'flex', alignItems: 'center', marginBottom: '12px' }}>
                          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style={{ marginRight: '10px', color: '#2DCA6E' }}>
                            <path d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                          </svg>
                          <span style={{ fontWeight: 600, color: '#FFFFFF', fontSize: '16px' }}>{getMessage("localStorageTitle") || "Local Storage"}</span>
                        </div>
                        <p style={{ margin: 0, fontSize: '14px', color: 'rgba(255, 255, 255, 0.75)', lineHeight: '1.5' }}>
                          {getMessage("localStorageDesc") || "Settings and API keys stored securely in your browser only. Never transmitted to external servers."}
                        </p>
                      </div>

                      <div style={{ padding: '20px', background: 'rgba(0, 120, 212, 0.08)', borderRadius: '10px', border: '1px solid rgba(0, 120, 212, 0.2)' }}>
                        <div style={{ display: 'flex', alignItems: 'center', marginBottom: '12px' }}>
                          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style={{ marginRight: '10px', color: '#0078D4' }}>
                            <path d="M13 10V3L4 14h7v7l9-11h-7z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                          </svg>
                          <span style={{ fontWeight: 600, color: '#FFFFFF', fontSize: '16px' }}>{getMessage("directProcessing") || "Direct Processing"}</span>
                        </div>
                        <p style={{ margin: 0, fontSize: '14px', color: 'rgba(255, 255, 255, 0.75)', lineHeight: '1.5' }}>
                          {getMessage("directProcessingDesc") || "Text sent directly to AI services using secure HTTPS. No intermediary servers or data logging."}
                      </p>
                    </div>
                    
                      <div style={{ padding: '20px', background: 'rgba(156, 39, 176, 0.08)', borderRadius: '10px', border: '1px solid rgba(156, 39, 176, 0.2)' }}>
                        <div style={{ display: 'flex', alignItems: 'center', marginBottom: '12px' }}>
                          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style={{ marginRight: '10px', color: '#9C27B0' }}>
                            <path d="M18.364 5.636L16.95 7.05A7 7 0 1019 12h2a9 9 0 11-2.636-6.364z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                            <path d="M12 6v6l4 2" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                          </svg>
                          <span style={{ fontWeight: 600, color: '#FFFFFF', fontSize: '16px' }}>{getMessage("noTracking") || "No Tracking"}</span>
                        </div>
                        <p style={{ margin: 0, fontSize: '14px', color: 'rgba(255, 255, 255, 0.75)', lineHeight: '1.5' }}>
                          {getMessage("noTrackingDesc") || "Zero analytics, cookies, or behavior monitoring. Your browsing activity remains private."}
                        </p>
                      </div>

                      <div style={{ padding: '20px', background: 'rgba(255, 193, 7, 0.08)', borderRadius: '10px', border: '1px solid rgba(255, 193, 7, 0.2)' }}>
                        <div style={{ display: 'flex', alignItems: 'center', marginBottom: '12px' }}>
                          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style={{ marginRight: '10px', color: '#FFC107' }}>
                            <path d="M16 4h2a2 2 0 012 2v14a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2h2" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                            <rect x="8" y="2" width="8" height="4" rx="1" ry="1" stroke="currentColor" strokeWidth="2" fill="none"/>
                          </svg>
                          <span style={{ fontWeight: 600, color: '#FFFFFF', fontSize: '16px' }}>{getMessage("yourControl") || "Your Control"}</span>
                        </div>
                        <p style={{ margin: 0, fontSize: '14px', color: 'rgba(255, 255, 255, 0.75)', lineHeight: '1.5' }}>
                          {getMessage("yourControlDesc") || "Complete control over your data and settings. Clear everything instantly or remove anytime."}
                        </p>
                      </div>
                    </div>
                    
                    <div style={{ display: 'flex', gap: '12px', marginTop: '24px', flexWrap: 'wrap' }}>
                    <Button
                      variant="primary"
                        onClick={() => window.open('https://www.boimaginations.com/lightup/privacy-policy', '_blank')}
                        style={{ display: 'flex', alignItems: 'center', gap: '8px', minWidth: '140px' }}
                    >
                        <svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <path d="M18 13v6a2 2 0 01-2 2H5a2 2 0 01-2-2V8a2 2 0 012-2h6m4-3h6v6m-11 5L21 3" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                      </svg>
                        Full Policy
                      </Button>
                      <Button
                        variant="default"
                        onClick={() => window.open('mailto:boimaginations@gmail.com?subject=Privacy Inquiry - LightUp Extension', '_blank')}
                        style={{ display: 'flex', alignItems: 'center', gap: '8px', minWidth: '120px' }}
                      >
                        <svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                          <polyline points="22,6 12,13 2,6" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                        </svg>
                        Contact
                      </Button>
                      <Button
                        variant="default"
                        onClick={async () => {
                          const confirmed = confirm(
                            'This will permanently delete ALL LightUp extension data including:\n\n' +
                            '• API keys and credentials\n' +
                            '• All settings and preferences\n' +
                            '• Theme and customization settings\n' +
                            'This action cannot be undone. Are you sure you want to continue?'
                          );
                          
                          if (confirmed) {
                            try {
                                                             // Clear chrome storage with proper error handling
                               await new Promise<void>((resolve, reject) => {
                                 chrome.storage.local.clear(() => {
                                   if (chrome.runtime.lastError) {
                                     reject(chrome.runtime.lastError);
                                   } else {
                                     resolve();
                                   }
                                 });
                               });
                               
                               await new Promise<void>((resolve, reject) => {
                                 chrome.storage.sync.clear(() => {
                                   if (chrome.runtime.lastError) {
                                     reject(chrome.runtime.lastError);
                                   } else {
                                     resolve();
                                   }
                                 });
                               });
                               
                               // Clear session storage if available
                               if (chrome.storage.session) {
                                 await new Promise<void>((resolve, reject) => {
                                   chrome.storage.session.clear(() => {
                                     if (chrome.runtime.lastError) {
                                       reject(chrome.runtime.lastError);
                                     } else {
                                       resolve();
                                     }
                                   });
                                 });
                               }
                              
                              // Clear any background script caches
                              try {
                                await chrome.runtime.sendMessage({ action: 'clearAllData' });
                              } catch (e) {
                                console.log('Background script not available for clearing');
                              }
                              
                              alert('✅ All LightUp extension data has been successfully cleared!\n\nThe page will reload to reflect the changes.');
                              window.location.reload();
                              
                            } catch (error) {
                              console.error('Error clearing data:', error);
                              alert('❌ Error clearing data: ' + error.message + '\n\nPlease try again or contact support.');
                            }
                          }
                        }}
                        style={{ 
                          display: 'flex', 
                          alignItems: 'center', 
                          gap: '8px', 
                          backgroundColor: 'rgba(231, 76, 60, 0.08)', 
                          borderColor: 'rgba(231, 76, 60, 0.3)', 
                          color: '#E74C3C',
                          minWidth: '140px',
                          fontWeight: 500
                        }}
                      >
                        <svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <path d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                        </svg>
                        Clear All Data
                    </Button>
                    </div>
                  </div>
                </SectionContainer>

                <SectionDivider />

                <SectionContainer>
                  <SectionHeader>Links</SectionHeader>
                  <FormDescription style={{ marginBottom: '16px' }}>Useful resources and external links</FormDescription>
                  
                  <div style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>
                    <Button
                      variant="default"
                      onClick={() => window.open('https://www.boimaginations.com/lightup', '_blank')}
                      style={{ display: 'flex', alignItems: 'center', gap: '8px', justifyContent: 'flex-start' }}
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor" style={{ width: '20px', height: '20px' }}>
                        <path strokeLinecap="round" strokeLinejoin="round" d="m20.893 13.393-1.135-1.135a2.252 2.252 0 0 1-.421-.585l-1.08-2.16a.414.414 0 0 0-.663-.107.827.827 0 0 1-.812.21l-1.273-.363a.89.89 0 0 0-.738 1.595l.587.39c.59.395.674 1.23.172 1.732l-.2.2c-.212.212-.33.498-.33.796v.41c0 .409-.11.809-.32 1.158l-1.315 2.191a2.11 2.11 0 0 1-1.81 1.025 1.055 1.055 0 0 1-1.055-1.055v-1.172c0-.92-.56-1.747-1.414-2.089l-.655-.261a2.25 2.25 0 0 1-1.383-2.46l.007-.042a2.25 2.25 0 0 1 .29-.787l.09-.15a2.25 2.25 0 0 1 2.37-1.048l1.178.236a1.125 1.125 0 0 0 1.302-.795l.208-.73a1.125 1.125 0 0 0-.578-1.315l-.665-.332-.091.091a2.25 2.25 0 0 1-1.591.659h-.18c-.249 0-.487.1-.662.274a.931.931 0 0 1-1.458-1.137l1.411-2.353a2.25 2.25 0 0 0 .286-.76m11.928 9.869A9 9 0 0 0 8.965 3.525m11.928 9.868A9 9 0 1 1 8.965 3.525" />
                      </svg>
                      Visit Website
                    </Button>
                    
                    <Button
                      variant="default"
                      onClick={() => window.open('https://chromewebstore.google.com/detail/lightup-ai-powered-web-an/pncapgeoeedlfppkohlbelelkkihikel/reviews', '_blank')}
                      style={{ display: 'flex', alignItems: 'center', gap: '8px', justifyContent: 'flex-start' }}
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor" style={{ width: '20px', height: '20px' }}>
                        <path strokeLinecap="round" strokeLinejoin="round" d="M11.48 3.499a.562.562 0 0 1 1.04 0l2.125 5.111a.563.563 0 0 0 .475.345l5.518.442c.499.04.701.663.321.988l-4.204 3.602a.563.563 0 0 0-.182.557l1.285 5.385a.562.562 0 0 1-.84.61l-4.725-2.885a.562.562 0 0 0-.586 0L6.982 20.54a.562.562 0 0 1-.84-.61l1.285-5.386a.562.562 0 0 0-.182-.557l-4.204-3.602a.562.562 0 0 1 .321-.988l5.518-.442a.563.563 0 0 0 .475-.345L11.48 3.5Z" />
                      </svg>
                      Rate Us on Chrome Web Store
                    </Button>
                  </div>
                </SectionContainer>
              </SettingsCard>
            </div>
          )}

          {error && <ErrorMessage message={error} />}

          {activeTab !== "about" && (
            <div style={{ marginTop: '24px', display: 'flex', justifyContent: 'space-between', alignItems: 'center', gap: '12px' }}>
              <AutoSaveStatus status={autoSaveStatus}>
                {autoSaveStatus === 'saving' && (
                  <>
                    <LoadingSpinner />
                    Auto-saving...
                  </>
                )}
                {autoSaveStatus === 'saved' && (
                  <>
                    <svg width="12" height="12" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                    </svg>
                    Auto-saved
                  </>
                )}
                {autoSaveStatus === 'error' && (
                  <>
                    <svg width="12" height="12" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                    </svg>
                    Auto-save failed
                  </>
                )}
              </AutoSaveStatus>
              
              <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
                <EnhancedSaveButton
                  variant="primary"
                  onClick={handleSave}
                  disabled={isSaving || !hasUnsavedChanges}
                  hasUnsavedChanges={hasUnsavedChanges}
                >
                  {isSaving ? (
                    <>
                      <LoadingSpinner />
                      Saving...
                    </>
                  ) : hasUnsavedChanges ? (
                    'Save Changes'
                  ) : (
                    'All Changes Saved'
                  )}
                </EnhancedSaveButton>
              </div>
            </div>
          )}
        </ContentArea>
      </ContentWrapper>
      
      {/* Toast Notifications */}
      <ToastContainer>
        {toasts.map((toast) => (
          <Toast 
            key={toast.id} 
            type={toast.type}
            isExiting={exitingToasts.has(toast.id)}
          >
            <ToastIcon>
              {toast.type === 'success' && (
                <svg viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                </svg>
              )}
              {toast.type === 'error' && (
                <svg viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                </svg>
              )}
              {toast.type === 'warning' && (
                <svg viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                </svg>
              )}
              {toast.type === 'info' && (
                <svg viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                </svg>
              )}
            </ToastIcon>
            <ToastContent>
              <ToastTitle>{toast.title}</ToastTitle>
              {toast.message && <ToastMessage>{toast.message}</ToastMessage>}
            </ToastContent>
            {!toast.persistent && (
              <ToastCloseButton onClick={() => removeToast(toast.id)}>
                <svg width="16" height="16" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
                </svg>
              </ToastCloseButton>
            )}
          </Toast>
        ))}
      </ToastContainer>
      
      {/* Unsaved Changes Indicator */}
      <UnsavedChangesIndicator visible={hasUnsavedChanges && autoSaveStatus !== 'saving'}>
        <svg width="16" height="16" viewBox="0 0 20 20" fill="currentColor" style={{ marginRight: '3px', marginTop: '4px' }}>
          <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
        </svg>
        You have unsaved changes
      </UnsavedChangesIndicator>
    </OptionsContainer>
  );
}

export default IndexOptions;
